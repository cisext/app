[
    {
        "LfdNr": "001",
        "Funktion": "_cd",
        "Title 🇬🇧": "Read out the time period of data record creation",
        "Description 🇬🇧": "With _cd (created/date) the exact time can be determined with date and time when the respective data record was created. Ninox automatically logs every activity within databases. _cd is an internal abbreviation that is automatically replaced by the full field name when used in a script or function field in Ninox. In the German version this name is 'Erstellt am'.",
        "Syntax 🇬🇧": "_cd",
        "Syntax examples 🇬🇧": "_cd ➤ Result: Value of the internal field 'Created on' with the time the record was created in the format date+time, e.g. \"19.03.2019, 08:22\".",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": "_cu, _md, _mu"
    },
    {
        "LfdNr": "002",
        "Funktion": "_cu",
        "Title 🇬🇧": "Read the creator of the data record",
        "Description 🇬🇧": "With _cu (created/user) the name of the user who created the record in question can be determined. Ninox automatically logs every activity within databases. _cu is an internal abbreviation that is automatically replaced by the full field name when used in a script or function field in Ninox. In the English version this name is 'Created by'.",
        "Syntax 🇬🇧": "_cu\nor 'Created by'.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "_cd, _md, _mu"
    },
    {
        "LfdNr": "003",
        "Funktion": "_md",
        "Title 🇬🇧": "Read the time of the last change",
        "Description 🇬🇧": "With _md (modified/date) the exact time can be determined with date and time when the record in question was last changed. Ninox automatically logs every activity within databases. _md is an internal abbreviation that is automatically replaced by the full field name when used in a script or function field in Ninox. In the English version this name is 'Last modified on'.",
        "Syntax 🇬🇧": "_md\nor 'Last modified on'.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": "_cd, _cu, _mu"
    },
    {
        "LfdNr": "004",
        "Funktion": "_mu",
        "Title 🇬🇧": "Read out the last editor of the data record",
        "Description 🇬🇧": "With _mu (modified/user) you can determine the name of the user who last changed the record in question. Ninox automatically logs every activity within databases. The _mu is an internal abbreviation that is automatically replaced by the full field name when used in a script or function field in Ninox. In the English version this name is 'Last modified by'.",
        "Syntax 🇬🇧": "_mu\nor 'Last modified by'.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "_cd, _cu, _md"
    },
    {
        "LfdNr": "156",
        "Funktion": "---String---",
        "Title 🇬🇧": "Three dashes to delimit strings",
        "Description 🇬🇧": "Normally the texts in the script are enclosed in quotation marks. Instead of quotation marks you can use three hyphens. Any quotation marks in the text are then used.\nThe variables can be integrated into text in curly brackets without plus signs. ",
        "Syntax 🇬🇧": "let VollName:= ---\n{Vorname} {Nachname}\n---;",
        "Syntax examples 🇬🇧": "html(---\n<div style=\"position: relative;\ntop: 40%;text-align: center; font-size:100px\"><b>{ myZahl }\n</b></div>\n---)",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": ""
    },
    {
        "LfdNr": "179",
        "Funktion": "%",
        "Title 🇬🇧": "gives the remainder of a division",
        "Description 🇬🇧": "For example:  5 % 3 gives a result 2 which means the % operator gives the remainder of the division.",
        "Syntax 🇬🇧": "number % number",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": ""
    },
    {
        "LfdNr": "005",
        "Funktion": "abs()",
        "Title 🇬🇧": "Remove negative sign",
        "Description 🇬🇧": "The abs() function removes existing signs and returns the absolute, positive value of a number. It is rather rare, but for certain calculations it may be necessary to continue with the positive value of a possibly negative result. In such cases, the abs() function saves the user from having to query the value and, if necessary, change the sign by multiplication.",
        "Syntax 🇬🇧": "abs(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Any numeric value with or without sign.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "sign()"
    },
    {
        "LfdNr": "006",
        "Funktion": "acos()",
        "Title 🇬🇧": "Calculate the arc cosine of a number",
        "Description 🇬🇧": "The function acos() returns the arc cosine of a number.",
        "Syntax 🇬🇧": "acos(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Relevant numeric value or expression between -1 and 1.",
        "Syntax examples 🇬🇧": "acos(-0.75) ➤ Result: 2,418858405776",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "cos()"
    },
    {
        "LfdNr": "007",
        "Funktion": "age()",
        "Title 🇬🇧": "Calculate age in years",
        "Description 🇬🇧": "The function age() can be used to calculate the current number of full years that have passed since a certain date. The most common use is certainly to calculate the age of persons based on their date of birth, but other uses are also conceivable: Depreciation periods, previous terms of long-term contracts, calculation of anniversaries, etc. The current date is always used for calculation.",
        "Syntax 🇬🇧": "age(DATUM)",
        "Parameters 🇬🇧": "DATUM = Valid value from a date, timestamp or date field.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": ""
    },
    {
        "LfdNr": "008",
        "Funktion": "alert()",
        "Title 🇬🇧": "Create message window",
        "Description 🇬🇧": "The function alert() opens a message window with a hint text and an Ok button. Since there are no options and therefore no return value that could be evaluated as a condition in the code, the execution of the script is not stopped but continued in the background if necessary. Thus, alert() messages are pure information that should be taken note of by the user. However, it is also possible to integrate the contents of text fields or variables into the alert texts. If the user should have different options to choose from and these are to be evaluated, the dialog() function is recommended as an alternative.\nUpdate 01/2020: If alert() is used within loops, the text content can be updated dynamically on each pass without clicking \"Ok\" (tested in conjunction with sendEmail(), http() and importFile()). So alert() can also be used as a status window or for progress messages for longer lasting processes.\nNote: alert() works on some platforms only with buttons, not in triggers or f(x)-fields.\n",
        "Syntax 🇬🇧": "alert(TEXT)",
        "Parameters 🇬🇧": "TEXT = Any text to be displayed to the user in the message window, text fields/variables can also be used.",
        "Syntax examples 🇬🇧": "1. alert(\"Ich bin ein Hinweis. Bitte bestätige mich!\")\n2. alert(\"Es ist jetzt genau \" + time(now()) + \" Uhr.\")\n3. alert(\"Der Kunde \" + KundenNr + \", \" + Name + \" existiert nicht!\")",
        "Category 🇬🇧": "User interface/GUI",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "_cd, dialog()"
    },
    {
        "LfdNr": "203",
        "Funktion": "appendTempFile()",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "createTempFile()"
    },
    {
        "LfdNr": "009",
        "Funktion": "appointment()",
        "Title 🇬🇧": "Create appointment from/to date + time",
        "Description 🇬🇧": "The appointment() function can be used to create a from-to appointment from two values of type 'date+time' (timestamp). Instead of the second timestamp, you can alternatively specify a value of the 'Duration' type, in which case Ninox will automatically calculate the 'To' value of the appointment with date and time. If the from and to date are on the same day, the second date is omitted from the display. Otherwise, both date and time values are displayed, so you should give the field enough space in width.",
        "Syntax 🇬🇧": "appointment(ZEITSTEMPEL1, ZEITSTEMPEL2 | ZEITDAUER)",
        "Parameters 🇬🇧": "ZEITSTEMPEL1 = Start date and time of the appointment in the format date+time.\nZEITSTEMPEL2 = End date and time of the appointment in the format date+time.\nZEITDAUER = Duration of the appointment in the 'Duration' field type format (\"X days\" and/or \"Hours:minutes\"). ",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions, Convert / Format",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": "date(), datetime()"
    },
    {
        "LfdNr": "160",
        "Funktion": "array()",
        "Title 🇬🇧": "Merge two arrays",
        "Description 🇬🇧": "With the function array() two arrays of the same data type can be merged. The return value is an array containing all elements of the two specified arrays. This can facilitate e.g. evaluations, because only one array has to be queried. If you want to merge more than two arrays, you have to execute the function several times (see syntax example).",
        "Syntax 🇬🇧": "array(ARRAY1, ARRAY2)",
        "Parameters 🇬🇧": "ARRAY1, ARRAY2 = Names of the arrays whose contents are to be merged. Both arrays must be of the same data type.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Array",
        "Matching Functions": "slice(), join()"
    },
    {
        "LfdNr": "010",
        "Funktion": "asin()",
        "Title 🇬🇧": "Calculate the arc sine of a number",
        "Description 🇬🇧": "The function asin() returns the arc sine of a number.",
        "Syntax 🇬🇧": "asin(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Relevant numeric value or expression between -1 and 1.",
        "Syntax examples 🇬🇧": "asin(0.5) ➤ Result: 0.5235987755982989",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "sin()"
    },
    {
        "LfdNr": "011",
        "Funktion": "atan()",
        "Title 🇬🇧": "Calculate the arctangent of a number",
        "Description 🇬🇧": "The function atan() returns the arctangent of a number.",
        "Syntax 🇬🇧": "atan(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Numerical value or expression.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "atan2(), tan()"
    },
    {
        "LfdNr": "012",
        "Funktion": "atan2()",
        "Title 🇬🇧": "Calculate arctangent with quotient",
        "Description 🇬🇧": "Calculates the arctangent of the quotient of the passed parameters.",
        "Syntax 🇬🇧": "atan2(ZAHL1, ZAHL2)",
        "Parameters 🇬🇧": "ZAHL1 = Numerical value or expression for the base.\nZAHL2 = Numerical value or expression for the quotient.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "atan(), tan()"
    },
    {
        "LfdNr": "013",
        "Funktion": "avg()",
        "Title 🇬🇧": "Calculate mathematical mean value",
        "Description 🇬🇧": "With avg() the mathematical average of a series of numerical values can be calculated. The values can be read from an array or a column. For example, the average turnover per order, the average payment duration of invoices in days, etc. \"Average\" is also available for table views in columns with numerical values.",
        "Syntax 🇬🇧": "avg(ARRAY | TABELLE.FELD)",
        "Parameters 🇬🇧": "ARRAY = Name of the array or value list\nTABELLE.FELD = Name of the table and numeric field whose average is to be calculated.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions, Array functions",
        "Plattformen": "Mac, iPhone",
        "Return value": "Numeric",
        "Matching Functions": "max(), min()"
    },
    {
        "LfdNr": "014",
        "Funktion": "barcodeScan()",
        "Title 🇬🇧": "Reading barcodes into text fields",
        "Description 🇬🇧": "With the function barcodeScan(), barcodes can be scanned on mobile devices via the built-in camera and their contents can be transferred to a text field. The behavior and the possibilities of the function barcodeScan() can differ depending on the platform. In this case, it is necessary to test on your main system and to research if necessary.",
        "Syntax 🇬🇧": "barcodeScan()",
        "Syntax examples 🇬🇧": "Artikelnummer := barcodeScan() ➤ Result: The camera reads a barcode and writes its value into the data field 'Artikelnummer'.\nlet myNummer := barcodeScan() ➤ Result: The camera reads a barcode and writes its value into the variable 'myNummer'.",
        "Category 🇬🇧": "Text functions, Web and Integration",
        "Plattformen": "iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": ""
    },
    {
        "LfdNr": "182",
        "Funktion": "cached()",
        "Title 🇬🇧": "Keeps the result of a select query or function in cache.",
        "Description 🇬🇧": "The cached() function is used to solve tricky performance issues mostly found in select-statements in multi user enviroments (has something to do with updating data)\nCached can be used also with http() functions and even with any other Ninox script to improve speed performances.\nExample with a select statement, the querry will only once executed and be remembered. This gives us the ability to not requerry or reevaluate complex select statements.\nThe cache is purged or released with invalidate() which can be called with a trigger.\nAlso when changing something on the database structure (in administrive mode) will purge the cache or when reloading the browser.",
        "Syntax 🇬🇧": "cached( any script)\nuse invalidate() to release the cache",
        "Syntax examples 🇬🇧": "cached( select Invoices where duedate < now())\ncached(http(\" ...........\"))\n",
        "Category 🇬🇧": "Other functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "invaluate()"
    },
    {
        "LfdNr": "015",
        "Funktion": "capitalize()",
        "Title 🇬🇧": "First letter as capital letter",
        "Description 🇬🇧": "With the function capitalize() the first character of a text can be converted into an uppercase letter. This can be useful to correct incorrect input when manually entering data, which undoubtedly always starts with an uppercase letter. Typical cases would be first and last names of persons, street names, etc. In such cases, capitalize() could be used in print layouts or as a trigger \"After Change\" for plausibility checks and corrections. If the first character is already a capital letter, it remains unchanged.",
        "Syntax 🇬🇧": "capitalize(TEXT)",
        "Parameters 🇬🇧": "TEXT = Any character string as string or from a data field.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "lower(), upper()"
    },
    {
        "LfdNr": "016",
        "Funktion": "ceil()",
        "Title 🇬🇧": "Round up decimal number to integer",
        "Description 🇬🇧": "As counterpart to floor() ceil() rounds up a decimal number to the next higher integer. Existing decimal places are virtually eliminated and the remaining integer is increased by 1. If an integer is already passed as a parameter, it remains unchanged.",
        "Syntax 🇬🇧": "ceil(Zahl)",
        "Parameters 🇬🇧": "Zahl = Any numeric value or expression with or without decimal places.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "floor(), round()"
    },
    {
        "LfdNr": "017",
        "Funktion": "chosen()",
        "Title 🇬🇧": "Evaluate multiple selection fields",
        "Description 🇬🇧": "The function chosen() determines all chosen options of a multiple selection field and writes them as text values into an array. This array can then be queried, for example, with contains() to see if it contains certain values, i.e. if certain options are selected. In addition, individual text values can also be queried directly with chosen(). The return value is then logical, i.e. 'true' or 'false'. ",
        "Syntax 🇬🇧": "chosen(MEHRFACHAUSWAHL【, TEXT | ZAHL】)",
        "Parameters 🇬🇧": "MEHRFACHAUSWAHL = name of the relevant multiple selection field.\nTEXT = Entry of the multiple selection to be queried as a string.\nZAHL = Numeric ID of the entry to be queried.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Array",
        "Matching Functions": "contains()"
    },
    {
        "LfdNr": "169",
        "Funktion": "clientLang()",
        "Title 🇬🇧": "Determine the preset language of the Ninox App",
        "Description 🇬🇧": "The function clientLang() can be used to determine the language that the user has preset in the respective app. The return value is a string with the code of the relevant language, e.g. \"de\" for German or \"en\" for English. Ninox allows the language to be set individually for each client. With the setting \"auto\", Ninox selects the language of the superordinate system.",
        "Syntax 🇬🇧": "clientLang()",
        "Syntax examples 🇬🇧": "clientLang() ➤ Ergebnis: de | en | fr | it | es | ca | pl | ru | chs | cht",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": ""
    },
    {
        "LfdNr": "018",
        "Funktion": "closeAllRecords()",
        "Title 🇬🇧": "Close all data forms",
        "Description 🇬🇧": "With closeAllRecords() all currently opened data forms can be closed and returned to the tabular view of the output table. The function can be activated e.g. with a button to speed up the process of closing several forms stacked on top of each other. If only the topmost form is to be closed, the function closeRecord() can be used.",
        "Syntax 🇬🇧": "closeAllRecords()",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "closeRecord()"
    },
    {
        "LfdNr": "019",
        "Funktion": "closeFullscreen()",
        "Title 🇬🇧": "Exit fullscreen form view",
        "Description 🇬🇧": "The function closeFullscreen() ends the current fullscreen form view and closes the record opened in it. Fullscreen views are opened with openFullscreen().",
        "Syntax 🇬🇧": "closeFullscreen()",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "openFullscreen()"
    },
    {
        "LfdNr": "020",
        "Funktion": "closeRecord()",
        "Title 🇬🇧": "Close top data form",
        "Description 🇬🇧": "With closeRecord() the topmost of several stacked data forms can be closed. As a result, either the underlying form will be visible or the tabular view if the closed form was the only one.\n\nWorks in the public cloud only with the button or in the function field with the trigger \"On click\". Not with other triggers.",
        "Syntax 🇬🇧": "closeRecord()",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "openRecord()"
    },
    {
        "LfdNr": "021",
        "Funktion": "cnt()",
        "Title 🇬🇧": "Count entries/data records",
        "Description 🇬🇧": "With the function cnt() - alternative notation: count() - entries in arrays or tables can be counted. In connection with select() you can also specify conditions, so that you can find out, for example, how many projects have the status \"Open\", how many customer names begin with \"S\" etc. Furthermore, cnt() can also be used for duplicate checking in data tables; the return value must not be greater than 1.",
        "Syntax 🇬🇧": "cnt(ARRAY | select TABELLE 【where BEDINGUNG】)",
        "Parameters 🇬🇧": "ARRAY = Value list or array whose entries are to be counted.\nTABELLE = table whose records are to be counted\nBEDINGUNG (optional) = Only entries/data records that match the condition are to be counted (otherwise: all).",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "select"
    },
    {
        "LfdNr": "151",
        "Funktion": "color()",
        "Title 🇬🇧": "Set or read out color",
        "Description 🇬🇧": "With the function color() a color value can be assigned to a color or function field or the color value of the chosen option of a selection field can be read. In the latter case, the color of a selection can be transferred to other (function) fields using the styled() function. To specify an alpha channel for the opacity, \"rgba\" must be prefixed. HSL color values are generally not supported by Ninox.",
        "Syntax 🇬🇧": "color(AUSWAHL | FARBTEXT | ROT, GRÜN, BLAU【, ALPHA】 )",
        "Parameters 🇬🇧": "AUSWAHL = Name of the selection field from which the color of the selected option is to be taken.\nFARBTEXT = Text with the color value as CSS name (\"Green\") or the RGB value in decimal or hexadecimal notation.\nROT, GRÜN, BLAU[,ALPHA] = Numerical values between 0 and 255 for RGB and optionally for the alpha channel (between 0 and 1). ",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "icon()"
    },
    {
        "LfdNr": "023",
        "Funktion": "concat()",
        "Title 🇬🇧": "List values separated by commas",
        "Description 🇬🇧": "With concat() several values can be read from an array, a table or a multiple selection field and written one after the other, separated by commas, into a text field or a text variable. In conjunction with range() a numeric value range from/to can also be specified. concat() is often used temporarily for intermediate steps within scripts, but also, for example, to display the selected options of a multiple selection textually in forms or print layouts. A possible alternative is the function join().",
        "Syntax 🇬🇧": "concat(ARRAY | TABELLE.FELD | MEHRFACHAUSWAHL)",
        "Parameters 🇬🇧": "ARRAY = value list according to the scheme [\"A\", \"B\", \"C\"] or existing array with the values to be read out.\nTABELLE.FELD = Name of the table and data field whose values are to be read and linked.\nMEHRFACHAUSWAHL = Name of the multiple selection field whose selected options are to be read out.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "join()"
    },
    {
        "LfdNr": "024",
        "Funktion": "contains()",
        "Title 🇬🇧": "Query text values for specific content",
        "Description 🇬🇧": "With contains() a text value can be checked whether it contains a specific string of any length. The return value is either true (found) or false (not found). This can be used, for example, to search text fields for keywords or in conjunction with text() to determine whether a particular option of a multiple selection field has been activated. An exact match is required to determine hits. If you do not want to distinguish between upper and lower case letters, you can use lower() or upper() to make the text and/or search string the same spelling. If the position of the searched string in the text is required in addition to the pure check of the occurrence, the function index() is recommended as an alternative. ",
        "Syntax 🇬🇧": "contains(TEXT, STRING)",
        "Parameters 🇬🇧": "TEXT = Text value, field or variable to be searched for a specific value.\nSTRING = character or string to be searched for.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Logical",
        "Matching Functions": "index(), text()"
    },
    {
        "LfdNr": "197",
        "Funktion": "correctedDate()",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": ""
    },
    {
        "LfdNr": "025",
        "Funktion": "cos()",
        "Title 🇬🇧": "Calculate the cosine of a number",
        "Description 🇬🇧": "The function cos() returns the cosine of an angle in radians. The result is between -1 and 1.",
        "Syntax 🇬🇧": "cos(ZAHL))",
        "Parameters 🇬🇧": "ZAHL = Relevant numeric value or expression.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "acos()"
    },
    {
        "LfdNr": "026",
        "Funktion": "create",
        "Title 🇬🇧": "Creating a New Record",
        "Description 🇬🇧": "With 'create' a new, empty record is appended to a table. Usually the command is used in connection with a variable assignment where the ID of the new data set is read out immediately. This variable can then be used to address the new data set directly in the script, to call it up for data entry or to fill it with data directly. If you want to copy an already existing data set completely, the function duplicate() is a good alternative to 'create'.",
        "Syntax 🇬🇧": "create TABELLE",
        "Parameters 🇬🇧": "TABELLE = Name of the table in which a new, empty data record is to be created",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Record-ID",
        "Matching Functions": "delete, duplicate()"
    },
    {
        "LfdNr": "027",
        "Funktion": "createCalendarEvent()",
        "Title 🇬🇧": "Create entry in Apple calendar",
        "Description 🇬🇧": "createCalendarEvent() is one of the few platform-specific Ninox functions. It can be used to create a direct entry in Apple's calendar app. If no specific calendar is specified, Ninox creates the entry in the default calendar. For entries in the reminders app there is the function createCalendarReminder.",
        "Syntax 🇬🇧": "createCalendarEvent(【KALENDER】, TITEL, TERMIN | ZEITSTEMPEL1, ZEITSTEMPEL2 | DAUER)",
        "Parameters 🇬🇧": "KALENDER(optional) = Name of the Apple calendar in which the entry is to be created.\nTITEL = Text to be displayed for the calendar entry.\nTERMIN = Valid value with start and end of the appointment, each in timestamp format (date+time).\nZEITSTEMPEL1 = Start time of the appointment in time stamp format.\nZEITSTEMPEL2 = End time of the appointment in time stamp format.\nDAUER = duration of the appointment in time stamp format (h:m).",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Mac, iPad, iPhone",
        "Return value": "Date/Time",
        "Matching Functions": "createCalendarReminder()"
    },
    {
        "LfdNr": "028",
        "Funktion": "createCalendarReminder()",
        "Title 🇬🇧": "Create entry in reminders app",
        "Description 🇬🇧": "With createCalendarReminder() you can create an entry in the Apple app 'Reminders'. ▶︎▶︎▶︎ NOTE: In several attempts, the syntax below did not create an entry with a given date. The date 01.01.1970 was always displayed. Contrary to what the name 'Calendar' implies, the calendar app is not addressed, the entries are always made in the 'Reminders' app. (Status: 02/20/2019)",
        "Syntax 🇬🇧": "createCalendarReminder(【LISTE】, TITEL,【START, FÄLLIG】)",
        "Parameters 🇬🇧": "LISTE = Name of the list in which the entry is to be made.\nTITEL = Text of the reminder entry.\nSTART = A date, timestamp or appointment is probably expected here, but none of these three options worked during the test.\nFÄLLIG= Time.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Mac, iPad, iPhone",
        "Return value": "Date/Time",
        "Matching Functions": "createCalendarEvent()"
    },
    {
        "LfdNr": "202",
        "Funktion": "createTempFile()",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "appendTempFile()"
    },
    {
        "LfdNr": "029",
        "Funktion": "createTextFile()",
        "Title 🇬🇧": "Create a text file",
        "Description 🇬🇧": "With the function createTextFile() a puretext file can be created script controlled and saved as an attachment to the record. The file name and the extension are freely selectable. This way, for example, simple lists or evaluations can be created in text or CSV format for further use outside Ninox. Direct formatting of the text to be saved (rich text) is not possible, but HTML tags are, so that, for example, a simple web page with the extension \".html\" can be generated, which can be interpreted by any common browser.",
        "Syntax 🇬🇧": "createTextFile(ID, TEXT, DATEINAME)",
        "Parameters 🇬🇧": "ID = record to which the file is to be appended (variable or \"this\" for the currently open one).\nTEXT = The text to be saved in the file. May consist of several text elements.\nDATEINAME = String with the complete name including file type under which the file is to be saved.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Files and Print",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "file(), importFile()"
    },
    {
        "LfdNr": "157",
        "Funktion": "databaseId()",
        "Title 🇬🇧": "Reading the internal database ID",
        "Description 🇬🇧": "With the function databaseId() the internal identifier of the currently opened database can be read. This identifier consisting of numbers, upper and lower case letters is part of the URL since version X.X and can be used as identifier for API actions. For normal Ninox usage it has no meaning.\nFor internal administration Ninox assigns a string to each newly created database.",
        "Syntax 🇬🇧": "databaseId() ",
        "Syntax examples 🇬🇧": "databaseId()  ➤ Result: MdrexVwoS30Md6",
        "Category 🇬🇧": "Database operations, Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": ""
    },
    {
        "LfdNr": "030",
        "Funktion": "date()",
        "Title 🇬🇧": "Read out or create date",
        "Description 🇬🇧": "The date() function allows you to extract a date from timestamp fields and create a valid date from numeric values for year, month and day. If you specify 0 as value for the day, the last day of the previous month is returned. In this way, the last day of the month can be determined very easily. Furthermore, a Unix time specification can be converted into a valid date in milliseconds with date(). ",
        "Syntax 🇬🇧": "date(ZEITSTEMPEL | JAHR, MONAT, TAG | UNIXZEIT)",
        "Parameters 🇬🇧": "ZEITSTEMPEL = Value of type Date + Time from which only the date is to be extracted.\nJAHR, MONAT, TAG = Numerical values or expressions for the year, month and day of the date to be created.\nUNIXZEIT= Numeric period specification in milliseconds since 01.01.1970, 00:00 (Unix time). ",
        "Syntax examples 🇬🇧": "date(2019, 3 + 6, 22) ➤ Result: 22.09.2019\ndate(2019, 7, 0) ➤ Result: 30.06.2019 (last day of previous month)\ndate(Timestamp) ➤ Result: Date of the 'Timestamp' field.\ndate(start(appointment) ➤ Result: Date of the start time (timestamp) of the 'Appointment' field.\n",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": "format(), month(), quarter(), today(), week(), year()"
    },
    {
        "LfdNr": "031",
        "Funktion": "datetime()",
        "Title 🇬🇧": "Generate value of type date+time",
        "Description 🇬🇧": "With the function datetime() a new value of the type date+time (timestamp) can be created from a date and time or from numeric single values. If the parameter for the time is missing, 00:00 is used.",
        "Syntax 🇬🇧": "datetime(DATUM 【, ZEIT】 | JAHR, MONAT, TAG【,STUNDE, MINUTE】| UNIXZEIT)",
        "Parameters 🇬🇧": "DATUM = Date that should be part of the time stamp.\nZEIT (optional)= Time that is to be part of the time stamp If this parameter is missing, 00:00 is used.\nJAHR, MONAT, TAG, STUNDE, MINUTE = Numerical values for the respective unit (e.g. 2019, 2, 24, 18, 15 for 24.02.2019, 18:15)\nUNIXTIME = Numerical time period in milliseconds since 01.01.1970, 00:00 o'clock (Unix time). ",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": "date(), format(), time()"
    },
    {
        "LfdNr": "032",
        "Funktion": "day()",
        "Title 🇬🇧": "express the day of the month as a number",
        "Description 🇬🇧": "With the function day() the day of a month can be extracted from a date. The result is a numeric value between 1 and 31. All data types that contain a current date can be used for the calculation. With format() the value can be formatted for display in text form.",
        "Syntax 🇬🇧": "day(DATUM | ZEITSTEMPEL | TERMIN)",
        "Parameters 🇬🇧": "DATUM = Valid date value, for example as a date() specification, from a data field or variable.\nZEITSTEMPEL = Valid value in date+time format.\nTERMIN = Specification in the from-to date format. The start time is used for the calculation by default.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "date()"
    },
    {
        "LfdNr": "033",
        "Funktion": "days()",
        "Title 🇬🇧": "Calculate number of days between two dates",
        "Description 🇬🇧": "The days() function returns the number of days between two dates. All work and weekend days from Monday to Sunday are considered. Frequent applications are the determination and checking of periods, time periods and (over-) due dates, the calculation of working days and vacation days, and so on. All data types that contain a current date can be used for calculation. If only the number of working days from Monday to Friday is to be calculated, the function workdays() is preferable.",
        "Syntax 🇬🇧": "days(START, ENDE))",
        "Parameters 🇬🇧": "START, ENDE) = Valid date values of the data types date, date+time or start/endof(date)",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "date()"
    },
    {
        "LfdNr": "171",
        "Funktion": "debug()",
        "Title 🇬🇧": "Script debugging in Javascript environment",
        "Description 🇬🇧": "debug() is a special function for advanced developers. It is used for debugging more complex Ninox scripts and only works in browser developer mode with the Javascript environment displayed. There, intermediate results of Ninox scripts can be displayed with debug(), which developers can use to trace the progress and identify possible sources of errors. \nWithin the Ninox environment, the debug() function has no effect. It can therefore remain in the code. Temporary alternatives to debug() are the functions alert() and dialog().",
        "Syntax 🇬🇧": "debug(TEXT)",
        "Parameters 🇬🇧": "TEXT = Textfeld, -variable oder Zeichenkette",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Other functions",
        "Plattformen": "Cloud, Server",
        "Matching Functions": "alert(), dialog()"
    },
    {
        "LfdNr": "175",
        "Funktion": "debugValueInfo()",
        "Title 🇬🇧": "Developer tool for ScriptCode",
        "Description 🇬🇧": "The debugValueInfo() function can be used to read out information about tables and data fields. The return value is a string with the type and content of the relevant element in ninox-internal format. The function can be applied to data fields as well as tables and is probably intended for developers who want to check certain values during the runtime of a script.",
        "Syntax 🇬🇧": "debugValueInfo(【select】ELEMENT)",
        "Parameters 🇬🇧": "ELEMENT = name of the field or table (for non-linked tables with \"select\")",
        "Syntax examples 🇬🇧": "debugValueInfo(select Tabelle) ➤ Ergebnis: \"nid([\"A1\",\"A2\",\"A3\"])\"\ndebugValueInfo((select Tabelle) order by Name) ➤ Ergebnis: \"nid([\"A3\",\"A2\",\"A1\"])\" Rückgabe der Record ID's erfolgt sortiert nach Name\ndebugValueInfo(FELD) ➤ Ergebnis: string(\"Test\") oder appointment(\"1590725940000/4150800000\") oder multi(\"1\") oder choice(\"Grün\")",
        "Category 🇬🇧": "Text functions, Other functions",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": "debug()"
    },
    {
        "LfdNr": "172",
        "Funktion": "degrees()",
        "Title 🇬🇧": "Convert radians into degrees (angles).",
        "Description 🇬🇧": "The degrees() function converts radians into degrees. It is mostly used for trigonometric calculations.\nThe counterpart to degrees() is radians(). ",
        "Syntax 🇬🇧": "degrees(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Beliebiger numerischer Wert oder Ausdruck.",
        "Syntax examples 🇬🇧": "degrees(π) ➤ Ergebnis 180\ndegrees(2π) ➤ Ergebnis 360",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "radians()"
    },
    {
        "LfdNr": "034",
        "Funktion": "delete",
        "Title 🇬🇧": "Delete data records",
        "Description 🇬🇧": "With the command 'delete' one, several or all records of a table can be deleted per script. It goes without saying that this command should only be used with extreme caution. It is used, for example, to empty temporary auxiliary tables or to delete certain records that meet a certain criterion at the push of a button. With regard to the DSGVO, for example, all data records of private customers could be checked and, if necessary, deleted if no active business relationship exists and the last contact was more than one year ago. It is recommended, however, that a manual backup of the database is always created before such and similar actions.",
        "Syntax 🇬🇧": "delete【select】TABELLE 【where BEDINGUNG",
        "Parameters 🇬🇧": "TABELLE = Name of the table from which records are to be deleted\nBEDINGUNG (optional) = condition for the filter of the data records to be deleted.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "create"
    },
    {
        "LfdNr": "035",
        "Funktion": "dialog()",
        "Title 🇬🇧": "Create a dialog box",
        "Description 🇬🇧": "The function dialog() creates a message window with a hint text and several freely selectable response options for interaction with the user. The execution of the calling script is interrupted until the user has clicked on one of the predefined options. The result can be transferred to a data field or stored in a variable and evaluated in the further course of the script. Since the contents of fields and variables can also be integrated into the hint text, dialog() offers quite a variety of possibilities. HTML tags can also be used for visual formatting. Note: On some platforms, the dialog() function can only be used in button scripts, but not in triggers and function fields.",
        "Syntax 🇬🇧": "dialog(TEXT1, TEXT2, ARRAY)",
        "Parameters 🇬🇧": "TEXT1 = Text to be displayed as the heading of the dialog.\nTEXT2 = Message text (also multiline) to be displayed to the user; line breaks and HTML tags are possible. \nARRAY = Array or value list with several comma-separated response options in text format.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI, Program control",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "alert()"
    },
    {
        "LfdNr": "036",
        "Funktion": "do as server",
        "Title 🇬🇧": "Execute function on the server",
        "Description 🇬🇧": "With the 'do as server' statement you can tell Ninox to execute the following code explicitly on the server until the final 'do'. Normally Ninox works very fast and distributes the load in a balanced way between client and server. However, in certain constellations, e.g. complex, repetitive queries, execution may be delayed because a new server contact must be established for each action. In such cases, it can help to have the relevant code executed directly on the server. Before doing so, however, you should check whether the code itself is causing the problems and can be optimized. The 'do as server' statement can also be useful in connection with http() calls for security reasons.",
        "Syntax 🇬🇧": "do as server\n   CODE\nend",
        "Parameters 🇬🇧": "CODE = sequence of commands and functions to be executed on the server",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Program control, Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "http()"
    },
    {
        "LfdNr": "201",
        "Funktion": "do as transaction",
        "Title 🇬🇧": "Execute function on the server",
        "Description 🇬🇧": "Do as transaction allows a set of code to run within the context of a transaction. The new construct behaves in the same way as Do as server, and thus is especially useful in the native and web app. Run the script within transactions to achieve faster execution and higher consistency by either applying changes completely upon successful completion or by discarding changes if any of the code in the wrapped script fails.",
        "Syntax 🇬🇧": "do as transaction\nCODE\nend",
        "Category 🇬🇧": "Program control, Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": ""
    },
    {
        "LfdNr": "037",
        "Funktion": "duplicate()",
        "Title 🇬🇧": "Fully duplicate a record",
        "Description 🇬🇧": "With duplicate() a record can be duplicated, i.e. a new record with identical contents can be created. If necessary, linked data from sub-tables is also transferred. A typical application example is a quotation with several order items, which is to be converted into an order or used as a template for a new quotation. This can be done with a single function thanks to duplicate(). If you also want to display the new record immediately for further processing, you can cache its ID and then open it with openRecord().",
        "Syntax 🇬🇧": "duplicate(DATENSATZ)",
        "Parameters 🇬🇧": "DATENSATZ = ID of the record to be duplicated, usually \"this\".",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "create"
    },
    {
        "LfdNr": "038",
        "Funktion": "duration()",
        "Title 🇬🇧": "Calculate the duration of an appointment",
        "Description 🇬🇧": "With the function duration() the duration of an appointment can be determined, i.e. the time between start and end time. The result is displayed in hours and minutes. If the appointment lasts several days, the number of days is also displayed.",
        "Syntax 🇬🇧": "duration(TERMIN)",
        "Parameters 🇬🇧": "TERMIN = Data field or variable in appointment format with from and to time",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": "appointment()"
    },
    {
        "LfdNr": "165",
        "Funktion": "email()",
        "Title 🇬🇧": "Display function field as e-mail field",
        "Description 🇬🇧": "With the function email() a function field can be displayed as an email field with a mailto button, so that by clicking on it a message can be generated immediately via the local email client. This can be useful in connection with the function userEmail(), for example. There is no plausibility check of the transferred content. Each string is taken over and displayed as an e-mail field.",
        "Syntax 🇬🇧": "email(EMAIL)",
        "Parameters 🇬🇧": "EMAIL = String with an e-mail address",
        "Syntax examples 🇬🇧": "Bsp 1:\nemail(\"support@ninox.com\")\nBsp: 2\nlet vMailAdresse := first(select Tabelle where Bedingung).TEXT;\nemail(vMailAdresse)",
        "Category 🇬🇧": "Text functions, Convert / Format",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": ""
    },
    {
        "LfdNr": "039",
        "Funktion": "endof()",
        "Title 🇬🇧": "Determine end time of an appointment",
        "Description 🇬🇧": "The function endof() can be used to access the end time of an appointment. The result is a value in the format date+time, which can be further processed as required and visually formatted with format(). The counterpart of endof() is start().",
        "Syntax 🇬🇧": "endof(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Data field or variable in appointment format with start and end time",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": "appointment(), start()"
    },
    {
        "LfdNr": "168",
        "Funktion": "eval()",
        "Title 🇬🇧": "Run strings as formula",
        "Description 🇬🇧": "With the function eval() texts can be executed as formulas or scripts. Since the texts concerned can be composed individually of different elements, eval() enables the creation of dynamic functions, within which e.g. the names of tables, fields and variables can be changed. The spectrum of possible applications ranges from simple mathematical calculations to more complex select-queries with changing table or field references.",
        "Syntax 🇬🇧": "eval(FORMEL, ID)",
        "Parameters 🇬🇧": "FORMULA = String with the formula to be executed\nID = ID of the data record (e.g. \"this\")",
        "Syntax examples 🇬🇧": "Bsp. 1:\nlet vText := \"2+6\";\neval(vText,this) ➤ Ergebnis: 8\nBsp. 2:\nlet vText := \"alert(\"\"Dies ist ein Test\"\")\";\neval(vText,this) ➤ Ergebnis: Erzeugt ein alert-Fenster mit dem Inhalt \"Dies ist ein Test\"\n",
        "Category 🇬🇧": "Text functions, Program control",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": ""
    },
    {
        "LfdNr": "040",
        "Funktion": "even()",
        "Title 🇬🇧": "Check if the number is even",
        "Description 🇬🇧": "With even() a number can be checked, if it is even, i.e. divisible by 2 without remainder. The return value is either true/true or false/untrue. The 0 is also evaluated as even. The counterpart of even() is odd().",
        "Syntax 🇬🇧": "even(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Numerical value or expression, data field or variable.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Logical",
        "Matching Functions": "odd()"
    },
    {
        "LfdNr": "041",
        "Funktion": "exp()",
        "Title 🇬🇧": "Calculate the exponential function of a number",
        "Description 🇬🇧": "The exp() function calculates the exponential function of a number based on the Euler number (e = 2.7182818284...)",
        "Syntax 🇬🇧": "exp(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Numerical value or expression.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": ""
    },
    {
        "LfdNr": "042",
        "Funktion": "extractx()",
        "Title 🇬🇧": "Extract characters with RegExp",
        "Description 🇬🇧": "Similar to substr(), the function extractx() has the purpose to search a text for certain character strings. Instead of a simple string as search pattern, it uses so called Regular Expressions, short RegExp or Regex, and thus offers much more possibilities for text analysis. A typical application example for extractx() would be the extraction of relevant partial information from imported data. The notation of regular expressions in Ninox is basically the same as in JavaScript. It is quite abstract and requires some training. Assistance with RegExp at https://regexr.com",
        "Syntax 🇬🇧": "extractx(TEXT, REGEX 【, FLAGS【, EXTRACT】】)",
        "Parameters 🇬🇧": "TEXT = String, text field or variable from which a string is to be extracted, if it occurs\nREGEX = The regular expression with which the text is to be analyzed.\nFLAGS (optional) = Additional control parameter(s), e.g. \"i\" to ignore lower and upper case.\nEXTRACT (optional) = Additional parameter(s) to determine the formatting of the result.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "replacex(), substr(), testx()"
    },
    {
        "LfdNr": "043",
        "Funktion": "file()",
        "Title 🇬🇧": "Addressing the file attachment of a data record",
        "Description 🇬🇧": "With the function file() a certain file attachment of a record can be addressed, e.g. to display it in a picture field or to send it as attachment of an automatically generated e-mail.",
        "Syntax 🇬🇧": "file(ID, DATEINAME)",
        "Parameters 🇬🇧": "ID = ID of the record to which the file in question was attached.\nDATEINAME = Full name of the file including extension as string.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Mathematical functions, Date and time functions, Convert / Format, User interface/GUI, Program control, Array functions, Database operations, Files and Print, Web and Integration, Users/Roles/Rights, Other functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "files(), importFile()"
    },
    {
        "LfdNr": "187",
        "Funktion": "fileMetadata()",
        "Title 🇬🇧": "Read metadata of an attachment/image field",
        "Description 🇬🇧": "The fileMetadata() function can be used to retrieve the metadata of a file. The file name, the size and the date of modification are returned.\nInstead of the file name, an image field can also be read with: fileMetadata(this, last(split(text(<imagefield>), \"/\"))).",
        "Syntax 🇬🇧": "fileMetadata(ID,DATEINAME)",
        "Parameters 🇬🇧": "ID = ID of the record to which the file in question was attached.\nDATEINAME = Complete name of the file incl. extension as string.",
        "Syntax examples 🇬🇧": "fileMetadata(this,\"210609_Rechnung.pdf\") ➤ Ergebnis: {\"name\":\"210909_Rechnung.pdf\",\"size\":95935,\"modifiedDate\":1623269393665}\nfileMetadata(this, last(split(text(<BILDFELD>), \"/\"))) ➤ Ergebnis: {\"name\":\"Auftragsdaten.pdf\",\"size\":3161,\"modifiedDate\":152327939435}\nfileMetadata(this,\"210609_Rechnung.pdf\").size ➤ Ergebnis: \"95935\"",
        "Category 🇬🇧": "Files and Print",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": "item(JSON)"
    },
    {
        "LfdNr": "044",
        "Funktion": "files()",
        "Title 🇬🇧": "Read out file attachments of a data record",
        "Description 🇬🇧": "In contrast to file(), files() - note the plural s - can be used to address or determine all or several file attachments of a record. The parameter or return value is an array with the complete file names. The function can be used, for example, to send several files as attachments of an e-mail or to search within a table for specific file attachments.",
        "Syntax 🇬🇧": "files(ID | ARRAY)",
        "Parameters 🇬🇧": "ID = ID of the data record whose file attachments are to be read out\nARRAY = Array with the file names that are to be sent or searched for specific files.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions, Files and Print",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Record-ID",
        "Matching Functions": "file(), importFile()"
    },
    {
        "LfdNr": "045",
        "Funktion": "first()",
        "Title 🇬🇧": "Read out first entry/record",
        "Description 🇬🇧": "With first() the first entry of an array or a data table can be accessed. This is either the one with the lowest ID or the first one that matches a certain condition defined by the user. For example, the first customer whose name begins with the letter \"A\". Either the ID or the content of a field of the data record can be returned. When using first() in conjunction with select(), it is recommended to sort the table accordingly with 'order by'. The counterpart of first() is last().",
        "Syntax 🇬🇧": "first(ARRAY | select TABELLE)",
        "Parameters 🇬🇧": "ARRAY = Value list or array whose first value is to be read out\nTABELLE = Name of the table whose first (found) record is to be accessed.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "last()"
    },
    {
        "LfdNr": "046",
        "Funktion": "floor()",
        "Title 🇬🇧": "rounding off a decimal number to the nearest whole number",
        "Description 🇬🇧": "As a counterpart to ceil(), floor() rounds off a decimal number to the respective integer before the decimal point. Existing decimal places are removed.",
        "Syntax 🇬🇧": "floor(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Any numeric value or expression.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "ceil(), round()"
    },
    {
        "LfdNr": "047",
        "Funktion": "for ... from ... to",
        "Title 🇬🇧": "Program loop from X to Y",
        "Description 🇬🇧": "With 'for... from... to' allows you to implement program loops based on value ranges. The index variable is increased by 1 from the start value to the end value, unless you specify a different step size. The loop is terminated with the keyword 'end'. The code between 'do' and 'end' is executed as long as the condition is true. This code can, for example, also contain or be used in user-defined functions. Program loops are important instruments for controlling the program flow in all script and programming languages. In principle, the number of loops is not limited, but one should carefully check the definition to ensure that it cannot produce endless loops.",
        "Syntax 🇬🇧": "for INDEX from START to ENDE 【step SCHRITTWEITE】do CODE end",
        "Parameters 🇬🇧": "INDEX = Variable that is increased by 1 or the number specified in STEP WIDTH with each loop pass.\nSTART = Numerical start value of the variable INDEX\nENDE = Numerical end value of the variable INDEX\nSCHRITTWEITE = number by which the index is to be increased with each pass.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Program control",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "for ... in ... do, while ... do"
    },
    {
        "LfdNr": "048",
        "Funktion": "for ... in ... do",
        "Title 🇬🇧": "Program loop by table/array",
        "Description 🇬🇧": "With 'for... in ... do' can be used to implement program loops, whose frequency is determined by the number of records in a table or elements in an array. With 'select where' or range() the number of entries can be limited, additionally a step size can be specified. Without such restrictions, the table or array is scanned from the first to the last record/element and the code between 'do' and 'end' is executed accordingly often. In principle, the number of passes is not limited, but you should check the definition carefully to ensure that it cannot produce endless loops.",
        "Syntax 🇬🇧": "for INDEX in (select TABELLE) | ARRAY | range(START, ENDE【, SCHRITTWEITE】) do\n    CODE\nend",
        "Parameters 🇬🇧": "INDEX = Variable that is increased by 1 or the number specified in STEP WIDTH with each loop pass.\nTABELLE = Name of the table to be processed from the first to the last data record.\nARRAY = Name of the array to be processed from the first to the last element.\nSTART, ENDE = Numerical values for the start and end of the loop.\nSCHRITTWEITE (optional) = Numeric value for the step size with which the loop goes from START to END (default: 1).",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Program control",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "for ... from ... to, while ... do"
    },
    {
        "LfdNr": "049",
        "Funktion": "format()",
        "Title 🇬🇧": "Formatting numbers, date and time values",
        "Description 🇬🇧": "With the function format() numbers, date and time values can be formatted user-defined and transferred as strings into text or function fields. Various codes are available for this purpose (see table '3_Format-Codes'), which can be combined in many ways as placeholders within the respective data type. All characters that have no placeholder meaning are transferred unchanged into the string. This allows further processing of the result, e.g. with hyphens, currency symbols, etc. An overview of the codes can be found in the table 'Format Options' and under the link above (\"Source / Further Info\"). When using numbers, please note that the format()-specification expects the dot as decimal character and the comma as thousand separator.",
        "Syntax 🇬🇧": "format(DATUM | UHRZEIT | ZEITSTEMPEL | ZAHL, FORMAT)",
        "Parameters 🇬🇧": "DATUM | UHRZEIT | ZEITSTEMPEL | ZAHL = Valid values of the respective data type to be formatted with format().\nFORMAT = String mask with the placeholder codes that determine the type and order of the format() display.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Mathematical functions, Date and time functions, Convert / Format",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "date(), number(), text(), time()"
    },
    {
        "LfdNr": "186",
        "Funktion": "formatJSON()",
        "Title 🇬🇧": "Converts a JSON object to a string",
        "Description 🇬🇧": "The function formatJSON() converts a valid JSON object into a string.\nThe same result is obtained if the text() function is applied to the JSON object instead of formatJSON().",
        "Syntax 🇬🇧": "formatJSON(ANY)",
        "Parameters 🇬🇧": "ANY = JSON object ",
        "Category 🇬🇧": "Program control, Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "text()"
    },
    {
        "LfdNr": "050",
        "Funktion": "formatXML()",
        "Title 🇬🇧": "Convert data to XML format",
        "Description 🇬🇧": "With the function formatXML() data can be converted into XML format. XML is, next to JSON, one of the most common formats for data exchange. Therefore, the function is especially interesting for connections to external servers via API.  \n\nNote: The syntax example below is taken from the webinar database \"112_XML\".",
        "Syntax 🇬🇧": "formatXML({XMLTEXT})",
        "Parameters 🇬🇧": "XMLTEXT = String with the structured data to be converted into XML format.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Convert / Format, Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "parseXML()"
    },
    {
        "LfdNr": "051",
        "Funktion": "function",
        "Title 🇬🇧": "Create custom functions",
        "Description 🇬🇧": "With 'function', Ninox offers the possibility to add your own functions to the existing ones. This is especially helpful when certain calculations are needed multiple times in a script. Since version 2.5 such user-defined functions can also be used globally, i.e. across tables in all f(x) fields, triggers and buttons of a database. The entry is made in Administrator mode in the database \"Options\" under \"Global function definitions\". The entire range of functions of the Ninox script language is available. Global functions can make working with repetitive steps much easier, as the code can be kept leaner and adjustments may only need to be made at one point. A user-defined function is called by its freely chosen name. Several arguments can be passed, the return value can accept all common data types and does not have to be specially declared; an array can be used to return several values of the same type. The names of arguments and parameters do not necessarily have to match, the assignment is made via the order of naming (argument1 = parameter1). However, a function can also be called without any arguments, if such arguments are not needed for the calculation or are generated within the function. In this way, \"global variables\" can also be declared.",
        "Syntax 🇬🇧": "function NAME(【PARAMETER1: text | number | date | time | datetime | boolean 【,PARAMETER2: ...】...】) do CODE end\nCall the function:\nNAME(【ARGUMENT1, 【ARGUMENT2】...】)",
        "Parameters 🇬🇧": "NAME = Freely selectable, ninox-compliant name of the function, under which it can later be called from scripts.\nPARAMETER = Freely selectable name for the transfer parameter, under which it is then addressed in the function code.\nDATENTYPE = Data type of the parameter (text, number, date, time, datetime, boolean)\nARGUMENT = Data field or variable whose value is to be passed to the function when called.\nCODE = Processing steps to be executed within the function",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Program control",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": ""
    },
    {
        "LfdNr": "199",
        "Funktion": "get()",
        "Title 🇬🇧": "Output the content of the requested field of a record.",
        "Description 🇬🇧": "returns the value of a field, whose name is passed in parameter, for the record whose id is passed in parameter.\nAllows to manipulate elements of the database without knowing in advance the structure.",
        "Syntax 🇬🇧": "get(ID,\"FIELDNAME\")",
        "Parameters 🇬🇧": "ID = RecordID\nFIELDNAME = Name of the requested field",
        "Syntax examples 🇬🇧": "get(this,\"ImageField\") ➤ Result: Mopped.jpg (Name of the image in the imagefield)\nget(first(select Tabel),\"InvoiceNumber\"➤ Result: IV-210816-0001 (Content of the field \"InvoiceNumber\")",
        "Category 🇬🇧": "Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "typeof()"
    },
    {
        "LfdNr": "191",
        "Funktion": "getVault(string)",
        "Title 🇬🇧": "No data yet...",
        "Description 🇬🇧": "No data yet...",
        "Syntax 🇬🇧": "getVault(string)",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": ""
    },
    {
        "LfdNr": "052",
        "Funktion": "html()",
        "Title 🇬🇧": "Preparing texts with HTML tags",
        "Description 🇬🇧": "With the function html() a text containing HTML tags can be interpreted and displayed. All basic HTML tags can be used to visually display content, including (HTML) tables, lists and inline styles. For example, the result can be displayed in a function field or specified as the content of the mail using sendEmail(). In normal text fields, on the other hand, any HTML tags that may be present are not interpreted as such, but simply displayed as normal characters. Only in connection with the function html() a formatted text, which can be displayed in a function field, is created.",
        "Syntax 🇬🇧": "html(TEXT)",
        "Parameters 🇬🇧": "TEXT = String or text field containing the HTML tags/commands to be interpreted",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "raw()"
    },
    {
        "LfdNr": "053",
        "Funktion": "http()",
        "Title 🇬🇧": "Connect to external web services via API/REST",
        "Description 🇬🇧": "Since the introduction of the API/REST interface, it is possible to use Ninox to connect to external web services and servers to exchange data with them. On the one hand, this allows access to databases of freely accessible services such as weather information or rail connections, and on the other hand, Ninox solutions can also be integrated into higher-level IT and management systems. Another option is the connection between two Ninox databases. The data exchange is in JSON format. The possibility of using API interfaces opens up completely new perspectives for Ninox in the business environment, but also requires special know-how, which for technological reasons lies outside the low code philosophy of Ninox.",
        "Syntax 🇬🇧": "http(METHODE, URL 【, HEADER】【, BODY】)",
        "Parameters 🇬🇧": "METHODE = Type of request according to HTTP standard as string. Possible methods are \"GET\", \"POST\", \"PUT\", \"DELETE\".\nURL = Exact address of the remote terminal including interface as a string.\nHEADER (optional) = HTTP header as JSON object.\nBODY (optional) = Transfer values as text or JSON objects.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "do as server"
    },
    {
        "LfdNr": "054",
        "Funktion": "icon()",
        "Title 🇬🇧": "Read or assign icon/symbol",
        "Description 🇬🇧": "With icon() symbols can be read or assigned. Ninox has a pool of 254 icons that can be displayed in selection, function and special data fields of the type 'Symbol'. Each of these icons has a specific name under which it is managed internally. In the case of selection and symbol fields, the assignment is made visually by the user in a dialog box, and in the case of function fields, the icons are assigned the name of the icon. The icon name is also required for the assignment of an icon using the styled() function. An overview of all icons with their names can be found in the 'Symbols' table in this database and in the '001_IconSet_123' database in the webinar team.",
        "Syntax 🇬🇧": "icon(NAME | AUSWAHL | SYMBOLFELD)",
        "Parameters 🇬🇧": "NAME = Internal name of the icon.\nAUSWAHL = Selection field from which the icon of the selected option is to be read.\nSYMBOLFELD = Data field of type 'Symbol' from which the icon is to be read.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI, Other functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": ""
    },
    {
        "LfdNr": "055",
        "Funktion": "if ... then",
        "Title 🇬🇧": "Create if-then condition",
        "Description 🇬🇧": "With 'if... then' queries can be used to make value assignments and work steps dependent on certain conditions. If the condition defined after 'if' is not fulfilled, the code after 'else' is optionally executed instead. If no 'else' option is specified either, the if query is terminated without action and, if necessary, continued with the next script line. There are no limits to the scope of the script parts concerned. This means that even complex code can be executed within an if-query. if-queries can also be nested and thus allow for multi-level queries. In such cases, however, it should be checked whether the if query could be executed with 'switch ... case' to make the if query more efficient.",
        "Syntax 🇬🇧": "if BEDINGUNG then CODE1【else CODE2】end",
        "Parameters 🇬🇧": "BEDINGUNG = Expression for the condition that must be fulfilled to execute the code after 'then'.\nCODE1 = One or more functions or instructions to be executed after 'then'.\nCODE2 (optional) = One or more functions or instructions to be executed after 'else'.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Program control",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "switch ... case"
    },
    {
        "LfdNr": "056",
        "Funktion": "importFile()",
        "Title 🇬🇧": "Importing and attaching a file",
        "Description 🇬🇧": "With importFile() a file can be imported and saved as an attachment of a record. The source can be either an external URL or a file previously created with printAndSaveRecord(). In this way, for example, graphic files can be transferred to image fields or PDF files can be created and saved as file attachments. Which files exist as attachments to a record can be determined with the function files(). There is currently no command in Ninox for the script-controlled deletion of file attachments, this must be done manually via the program interface if necessary.  ",
        "Syntax 🇬🇧": "importFile(ID | URL | AUSDRUCK, DATEINAME)",
        "Parameters 🇬🇧": "ID = Specification of the data record to which the file to be imported is to be saved as an attachment (usually 'this').\nURL = Exact specification of the storage location of the file to be imported as a string including server, path and full name. file name.\nAUSDRUCK = Ninox function with which a file is generated, e.g. printAndSaveRecord().\nDATEINAME= Name including extension under which the generated file is to be saved as an attachment.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Files and Print",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "file(), files()"
    },
    {
        "LfdNr": "057",
        "Funktion": "index()",
        "Title 🇬🇧": "Determine string position in a text",
        "Description 🇬🇧": "With index() the position of a searched string in a text can be determined. The search string can be a single character or a longer string. In contrast to contains(), it not only checks whether the searched string exists (yes/no), but also passes the numeric value of its starting position within the text. The numbering of the character positions starts at 0, if the search string is not found in the text, the return value is -1. An exact match is required to determine a hit. If upper and lower case letters are not to be distinguished, the text and/or search string can be unified with lower() or upper().",
        "Syntax 🇬🇧": "index(TEXT, STRING)",
        "Parameters 🇬🇧": "TEXT = Text value to be searched for a specific string.\nSTRING = Character or character string to be searched for and, if necessary, its position to be determined.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "contains(), substr()"
    },
    {
        "LfdNr": "183",
        "Funktion": "invalidate()",
        "Title 🇬🇧": "Used to release the cached() function",
        "Description 🇬🇧": "Releases the cache of the cached() function.\n\nSee cached() function",
        "Syntax 🇬🇧": "invalidate()",
        "Category 🇬🇧": "Other functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "cached()"
    },
    {
        "LfdNr": "161",
        "Funktion": "isAdminMode()",
        "Title 🇬🇧": "Checks whether the user is logged in as Admin",
        "Description 🇬🇧": "The isAdminMode() function can be used to check whether the current user is in the administration mode, i.e. whether the spanner symbol has been activated. The result is either yes/true or no/false.",
        "Syntax 🇬🇧": "isAdminMode()",
        "Syntax examples 🇬🇧": "isAdminMode() ➤ Ergebnis: true/false",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Logical",
        "Matching Functions": ""
    },
    {
        "LfdNr": "162",
        "Funktion": "isDatabaseLocked()",
        "Title 🇬🇧": "Check whether database protection is active",
        "Description 🇬🇧": "The function isDatabaseLocked() can be used to check whether the database is password-protected and this protection is active.  The result is either Yes/true or No/false. If you only want to check whether a password has been set up for the database at all, the function isDatabaseProtected() helps.",
        "Syntax 🇬🇧": "isDatabaseLocked() ",
        "Syntax examples 🇬🇧": "isDatabaseLocked() ➤ Ergebnis: true/false",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Logical",
        "Matching Functions": "isDatabaseProtected()"
    },
    {
        "LfdNr": "163",
        "Funktion": "isDatabaseProtected()",
        "Title 🇬🇧": "Checks whether a password has been assigned to the database.",
        "Description 🇬🇧": "The function isDatabaseProtected() can be used to check whether the database has been password protected. The result is either Yes/true or No/false. To check whether the password protection is also currently active, there is the function isDatabaseLocked(). ",
        "Syntax 🇬🇧": "isDatabaseProtected()",
        "Syntax examples 🇬🇧": "isDatabaseProtected() ➤ Ergebnis: true/false",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Logical",
        "Matching Functions": "isDatabaseLocked()"
    },
    {
        "LfdNr": "058",
        "Funktion": "item(ARRAY)",
        "Title 🇬🇧": "Accessing individual array elements",
        "Description 🇬🇧": "The item() function can be used to access a specific element in an array using the index, where index is the numeric value of the element position within the array. Counting starts at 0, so to access the third element of an array, for example, the index would be 2. The type of the return value is the same as for the array elements. The function item() is used for example to read each array element in loops and check its value. For this purpose a variable is inserted for the index and incremented by 1 with each pass. Another common application is the splitting of structured text information in conjunction with the function split().",
        "Syntax 🇬🇧": "item(ARRAY, INDEX)",
        "Parameters 🇬🇧": "ARRAY = Value list or name of the array from which a value is to be extracted.\nINDEX = Numeric value with the position in the array of the value to be extracted (1st position = 0).",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "item(JSON), split(), splitx()"
    },
    {
        "LfdNr": "154",
        "Funktion": "item(JSON)",
        "Title 🇬🇧": "Accessing Nested JSON Objects",
        "Description 🇬🇧": "The item() function can be used to access not only elements in arrays, but also individual objects in hierarchical JSON structures that do not exist as arrays. \nFor example, item(JSON,OBJECT1) can be used to access the data of the object named \"OBJECT1\".",
        "Syntax 🇬🇧": "item(JSON, OBJECT1).OBJECT2",
        "Parameters 🇬🇧": "JSON = Field or variable containing the JSON data\nOBJECT1 = first-level object identifier.\nOBJECT2 = second level object identifier.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "item(ARRAY)"
    },
    {
        "LfdNr": "155",
        "Funktion": "join()",
        "Title 🇬🇧": "Merge multiple values",
        "Description 🇬🇧": "With join() several entries from an array or table can be merged into one text field. This is similar to concat(), but with the added option of specifying a custom string to separate the entries. For example, a line break can be used as a separator, which writes the values one below the other in a multiline text field. The Ninox function join() has nothing in common with the SQL statement of the same name.",
        "Syntax 🇬🇧": "join(ARRAY | select TABELLE.FELD, TRENNZEICHEN)",
        "Parameters 🇬🇧": "ARRAY = Value list or name of the array whose entries are to be merged.\nTABELLE.FELD = Name of the table and data field whose contents are to be merged\nTRENNZEICHEN = One or more alphanumeric characters to be placed between the entries.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "concat(), select"
    },
    {
        "LfdNr": "060",
        "Funktion": "last()",
        "Title 🇬🇧": "Read last entry or data record",
        "Description 🇬🇧": "As a counterpart to first(), last() can be used to access the last entry of an array or data table. This is either the one with the highest ID or the last of a subset filtered by a user-defined condition. As result either the ID or a field content of the record can be returned. When using last() in conjunction with select(), it is recommended to sort the table with 'order by'.",
        "Syntax 🇬🇧": "last(ARRAY | select TABELLE)",
        "Parameters 🇬🇧": "ARRAY = Value list or array whose last value is to be read out\nTABELLE = Name of the filtered or unfiltered table whose last record is to be accessed ",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "first()"
    },
    {
        "LfdNr": "061",
        "Funktion": "latitude()",
        "Title 🇬🇧": "Reading the latitude of a location",
        "Description 🇬🇧": "With latitude() the latitude of a location field can be determined. Result is a numeric value with the decimal degree, which can be passed to the location() function. For further processing with other geo and map services such as Google Maps, the value may have to be converted according to the provider's specifications. To identify a location, the longitude is still needed, which can be determined in Ninox with longitude().",
        "Syntax 🇬🇧": "latitude(STANDORT)",
        "Parameters 🇬🇧": "STANDORT = Field or variable of data type 'Location' with longitude and latitude.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "location(), longitude()"
    },
    {
        "LfdNr": "062",
        "Funktion": "length()",
        "Title 🇬🇧": "Determining the length of a string",
        "Description 🇬🇧": "The lenght() function returns a numeric value with the number of characters a text contains. This can be used, for example, to compare texts or to check fields afterwards for a certain minimum content. In conjunction with other functions like substr() or index() it would also be possible to determine the number of characters from a certain position on. However, it can also be of interest for factual reasons to know the length of texts, e.g. for later transfer to external parties or for the calculation of average values, in order to derive other findings.",
        "Syntax 🇬🇧": "length(TEXT)",
        "Parameters 🇬🇧": "TEXT = Text field, variable or string whose length is to be determined.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "index(), substr(), text()"
    },
    {
        "LfdNr": "063",
        "Funktion": "let",
        "Title 🇬🇧": "Declare a variable",
        "Description 🇬🇧": "The 'let' statement is used to declare a variable in Ninox by assigning a value to it. It automatically assumes the data type of the assigned value. Variables are a basic element of every script and programming language. They are only temporarily valid within a script and are used to temporarily store values for further processing steps. If the script is terminated, all variables lose their contents. As an alternative to 'let', there is also 'var', which theoretically should have a more extensive range of validity. In practice, however, there are (so far) no recognizable differences, so for the sake of uniformity you can stay with 'let'.",
        "Syntax 🇬🇧": "let NAME := WERT",
        "Parameters 🇬🇧": "NAME = Freely selectable name (except Ninox keywords) under which the variable is to be addressed.\nWERT = Any value of any data type that the variable is to take on, either as a direct assignment, as the result of a function, or from a data field or other variable.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Program control",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "var"
    },
    {
        "LfdNr": "170",
        "Funktion": "like",
        "Title 🇬🇧": "Case-insensitive comparison of two strings",
        "Description 🇬🇧": "'like' is a comparison operator that can be used to compare two strings. In contrast to the case-sensitive equal sign (=), 'like' does not distinguish between lower and upper case letters. The result is either yes/true or no/false. By using 'like', the previous conversion of the comparison values into lower or upper case letters with lower() or upper() can be omitted.",
        "Syntax 🇬🇧": "TEXT1 like TEXT2",
        "Parameters 🇬🇧": "TEXT1 = Textfeld, -variable oder Zeichenkette\nTEXT2 = Textfeld, -variable oder Zeichenkette",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server",
        "Return value": "Logical",
        "Matching Functions": ""
    },
    {
        "LfdNr": "064",
        "Funktion": "ln()",
        "Title 🇬🇧": "Calculate natural logarithm",
        "Description 🇬🇧": "The function ln() returns the logarithm to the base e (the Euler number) and is therefore called the natural logarithm.\nIt returns a positive number, in case of 0 \"-infinity\" (infinity).\n",
        "Syntax 🇬🇧": "ln(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Numerical value whose logarithm is to be calculated",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "log()"
    },
    {
        "LfdNr": "065",
        "Funktion": "location()",
        "Title 🇬🇧": "Assign a location",
        "Description 🇬🇧": "With the function location() a location field can be filled with a description and the longitude and latitude. Location fields in Ninox have the special feature that they can be used to directly open the respective map app, which displays the location with the description text. Since the different Ninox apps also access different services, the behavior may differ depending on the platform.",
        "Syntax 🇬🇧": "location(TITEL, BGRAD, LGRAD)",
        "Parameters 🇬🇧": "TITEL = Text describing the location (exact address and/or additional information) \nBGRAD = Numerical value as decimal indication of latitude.\nLGRAD = Numerical value as decimal longitude.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "latitude(), longitude()"
    },
    {
        "LfdNr": "066",
        "Funktion": "log()",
        "Title 🇬🇧": "Calculate the logarithm of a number",
        "Description 🇬🇧": "The function log() returns the logarithm of a number to a base. If no parameter is given for base, it is 10. in case of 0 \"-infinity\" (infinity).",
        "Syntax 🇬🇧": "log(ZAHL1【, ZAHL2】)",
        "Parameters 🇬🇧": "ZAHL1 = Numerical value or expression > 0.\nZAHL2 (optional) = Numerical value or expression as base (otherwise: 10).",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "ln()"
    },
    {
        "LfdNr": "067",
        "Funktion": "longitude()",
        "Title 🇬🇧": "Reading the longitude of a location",
        "Description 🇬🇧": "With longitude() the longitude of a location field can be determined. Result is a numeric value with the decimal degree, which can be passed to the location() function. For further processing with other geo and map services such as Google Maps, the value may have to be converted according to the provider's specifications. To identify a location, the latitude is still needed, which can be determined in Ninox with latitude().",
        "Syntax 🇬🇧": "longitude(STANDORT)",
        "Parameters 🇬🇧": "STANDORT = Field or variable of data type 'Location' with longitude and latitude.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "latitude(), location()"
    },
    {
        "LfdNr": "068",
        "Funktion": "lower()",
        "Title 🇬🇧": "Convert text to lower case",
        "Description 🇬🇧": "With lower() all upper case letters of a text can be converted to lower case. All other characters remain unchanged. The function can be useful for comparing strings or for the prophylactic or actual correction of incorrect spellings in names, designations or identifiers that contain only lowercase letters. Another frequent use is the temporary unification of texts for tolerant comparisons and searches. The counterpart to lower() is upper().",
        "Syntax 🇬🇧": "lower(TEXT)",
        "Parameters 🇬🇧": "TEXT = Text or character string whose letters are all to be converted to upper case",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Convert / Format",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "upper()"
    },
    {
        "LfdNr": "069",
        "Funktion": "lpad()",
        "Title 🇬🇧": "Fill text on the left with characters",
        "Description 🇬🇧": "With the function lpad() a text can be padded on the left side with one or more leading characters up to a given length. The string is repeated until the total length of the text is reached. This can be useful, for example, for data which must have a certain length for technical reasons or for optical padding in print layouts in fixed-width font. If the source text already reaches or exceeds the specified length, it remains unchanged. The counterpart to lpad() is rpad().",
        "Syntax 🇬🇧": "lpad(TEXT, LÄNGE, STRING)",
        "Parameters 🇬🇧": "TEXT = Text that should be padded if necessary, if it does not reach the number of characters specified under LENGTH.\nLÄNGE = Length as the numerical number of characters up to which the text is to be filled.\nSTRING = Character or character string with which the text is to be filled.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "rpad()"
    },
    {
        "LfdNr": "070",
        "Funktion": "max()",
        "Title 🇬🇧": "Find the highest value in a series",
        "Description 🇬🇧": "With the function max() the highest value of a series of similar data can be determined. The underlying data series can be an array or a table column. Either numbers or texts can be compared, whereby the former are sorted according to their mathematical values, the latter quasi-alphabetically character by character according to the internal character codes. The counterpart of max() is min().",
        "Syntax 🇬🇧": "max(ARRAY | TABELLE.FELD)",
        "Parameters 🇬🇧": "ARRAY = Value list or name of the array whose highest value is to be determined. \nTABELLE.FELD = Name of the table and data field whose highest value is to be determined",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "min()"
    },
    {
        "LfdNr": "071",
        "Funktion": "min()",
        "Title 🇬🇧": "Find the lowest value in a series",
        "Description 🇬🇧": "With the function max() the highest value of a series of similar data can be determined. The underlying data series can be an array or a table column. Either numbers or texts can be compared, whereby the former are sorted according to their mathematical values, the latter quasi-alphabetically character by character according to the internal character codes. The counterpart of max() is min().",
        "Syntax 🇬🇧": "max(ARRAY | TABELLE.FELD)",
        "Parameters 🇬🇧": "ARRAY = Value list or name of the array whose highest value is to be determined. \nTABELLE.FELD = Name of the table and data field whose highest value is to be determined",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "max()"
    },
    {
        "LfdNr": "072",
        "Funktion": "month()",
        "Title 🇬🇧": "Extract month from a date",
        "Description 🇬🇧": "The function month() reads the month from a date value. The result is a number between 1 and 12. All data types that contain a current date can be used for the calculation. With format() the value can be formatted for display in text form.",
        "Syntax 🇬🇧": "month(DATUM | ZEITSTEMPEL | TERMIN) ",
        "Parameters 🇬🇧": "DATUM = Valid date value, for example as a date() specification, from a data field or variable.\nZEITSTEMPEL = Valid value in date+time format.\nTERMIN = Specification in the from-to date format. The start time is used for the calculation by default.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "date(), day(), quarter(), week(), year()"
    },
    {
        "LfdNr": "149",
        "Funktion": "monthIndex()",
        "Title 🇬🇧": "Determine number of month from name of month",
        "Description 🇬🇧": "With the function monthIndex() the name of a month can be used to determine its consecutive number in the year. The result is a numeric value from 1 to 12. The function can be helpful if the month is the result of a calculation or from imported data only as a string with its name, but is to be processed mathematically. If, on the other hand, the month number is to be extracted from a date value, the month() function is recommended. The counterpart to monthIndex() is monthName().\n",
        "Syntax 🇬🇧": "monthIndex(NAME)",
        "Parameters 🇬🇧": "NAME = String with the name of the month according to the language settings",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions, Convert / Format",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "month(), monthName()"
    },
    {
        "LfdNr": "148",
        "Funktion": "monthName()",
        "Title 🇬🇧": "Name of month as text",
        "Description 🇬🇧": "The function returns a month name by numbers. This is useful, for example, when grouping dates by months.",
        "Syntax 🇬🇧": "monthName(INDEX)",
        "Parameters 🇬🇧": "INDEX = Numeric value from 1 to 12 for the sequence number of the month in the year.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions, Convert / Format",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "month(), monthIndex(), weekdayName()"
    },
    {
        "LfdNr": "073",
        "Funktion": "ninoxApp()",
        "Title 🇬🇧": "Query executing Ninox platform ",
        "Description 🇬🇧": "The function ninoxApp() can be used to determine on which platform Ninox is currently running. Possible return values are \"web\", \"mac\", \"ipad\", \"iphone\" or \"android\". Such a check can be useful e.g. if Ninox is used on different different platforms and system specific functions should be activated. If a certain action is not available on the current platform, alternative code can be executed instead.",
        "Syntax 🇬🇧": "ninoxApp()",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": ""
    },
    {
        "LfdNr": "074",
        "Funktion": "now()",
        "Title 🇬🇧": "Determine current time",
        "Description 🇬🇧": "With now() the current time can be determined, consisting of the date of the respective day and the time at which the function is executed. Thus, a timestamp is created. now() is the basis for many calculations of periods and durations, which are based on values in the format date+time. If only the current date without time is needed, the function today() is an alternative.",
        "Syntax 🇬🇧": "now()",
        "Syntax examples 🇬🇧": "now() ➤ Ergebnis (Bsp.): 18.03.2019, 10:32\ntime(now()) ➤ Ergebnis (Bsp.) : 10:32\ndate(now()) + 2 ➤ Ergebnis (Bsp.) : 20.03.2019",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": "today()"
    },
    {
        "LfdNr": "152",
        "Funktion": "null",
        "Title 🇬🇧": "Query data field/variable whether empty",
        "Description 🇬🇧": "’null' is not a function, but a fixed defined value or state. Here, 'null' does not represent the mathematical zero, but the state 'empty', i.e. 'no content'. In this way, each data field can be checked for whether it contains a value, regardless of the data type. The result is either 'true' or 'false', depending on whether the field contains a value or not. In shortened notation, the query \"if XY != null then ...\" can also be set to \"if XY then ...\". (\"If XY contains a value, then ...\"). Conversely, data fields and variables with the value assignment \":= null\" can also be emptied, i.e. any existing contents can be removed. Special feature: To empty link fields, i.e. to remove links, the assignment must be \":= 0\".",
        "Syntax 🇬🇧": "= null | := null",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Mathematical functions, Date and time functions, Program control, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Logical",
        "Matching Functions": "if ... then, let"
    },
    {
        "LfdNr": "075",
        "Funktion": "number()",
        "Title 🇬🇧": "Reading / creating numerical values",
        "Description 🇬🇧": "With number() the contents of different data types can be read as numeric values or converted into such. This function is used relatively often in everyday Ninox life.  The result depends on the respective data type: text consisting of digits only is converted into a number, the record number is generated from an ID, and date or time specifications are mapped in Unix time (milliseconds since 01.01.1970). For date fields, the start time is referenced by default, unless the end time is explicitly specified with endof(). Applied to checkboxes, number() returns the number of the selected option (default).",
        "Syntax 🇬🇧": "number(TEXT | UHRZEIT | DATUM | ZEITSTEMPEL | TERMIN | AUSWAHL | ID)",
        "Parameters 🇬🇧": "All data types for which there is a meaningful numerical equivalent or which can be converted into a numerical value can be used as parameters.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions, Convert / Format",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "appointment(), date(), datetime(), text(), time()"
    },
    {
        "LfdNr": "076",
        "Funktion": "numbers()",
        "Title 🇬🇧": "Reading numbers from multiple selection",
        "Description 🇬🇧": "With numbers() the numbers of the selected options of a multiple selection field can be determined and written comma separated into an array. The numeric elements of the array can then be converted into strings with text() and checked for the occurrence of certain values with index() or contains(). This method is an alternative to directly checking the text entries of a multiple selection field.",
        "Syntax 🇬🇧": "numbers(MEHRFACHAUSWAHL)",
        "Parameters 🇬🇧": "MEHRFACHAUSWAHL = Name of the multiple selection field whose values are to be read",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI, Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Array",
        "Matching Functions": "chosen()"
    },
    {
        "LfdNr": "077",
        "Funktion": "odd()",
        "Title 🇬🇧": "Check number if it is odd",
        "Description 🇬🇧": "With odd() a number can be checked to see if it is odd, i.e. not divisible by 2 without a remainder. The return value is either true or false. The 0 is evaluated as even. The counterpart of odd() is even().",
        "Syntax 🇬🇧": "odd(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Numerical value or expression, data field or variable.",
        "Syntax examples 🇬🇧": "odd(5+7) ➤ Ergebnis: false\nodd(16.3) ➤ Ergebnis: true\nodd(0) ➤ Ergebnis: false",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Logical",
        "Matching Functions": "even()"
    },
    {
        "LfdNr": "078",
        "Funktion": "openFullscreen()",
        "Title 🇬🇧": "Show data form in full screen mode",
        "Description 🇬🇧": "With openFullscreen() a data form can be brought to the full size of the Ninox window. The ID of the record to be displayed in fullscreen mode must be specified. Normally data forms take up only a part of the width of the Ninox window and leave the left navigation bar and the first columns of the respective table visible. This is in itself very practical, but it may be that you want to use the full width for the form depending on the situation, either for reasons of space or to avoid bothering a user with other controls. For this purpose, openFullscreen() can be executed even when a database is opened, for example.",
        "Syntax 🇬🇧": "openFullscreen(ID,[STRING])",
        "Parameters 🇬🇧": "ID = Ninox-specific ID of the data set to be opened in full screen mode.\nSTRING = Name of the tab to be opened.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, Android",
        "Matching Functions": "closeFullscreen()"
    },
    {
        "LfdNr": "079",
        "Funktion": "openPrintLayout()",
        "Title 🇬🇧": "Open a specific print layout",
        "Description 🇬🇧": "With the function openPrintLayout() an existing print layout of the current table can be opened. For example, a button can be used to query a status or a document type in the respective record and, depending on the result, open the corresponding print layout.",
        "Syntax 🇬🇧": "openPrintLayout(DATENSATZID【, LAYOUT】)",
        "Parameters 🇬🇧": "DATENSATZID = ID of the data record to be opened in the print layout (e.g. \"this\").\nLAYOUT (optional) = name of the print layout to be opened as a string or variable.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Files and Print",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "printAndSaveRecord(), printRecord()"
    },
    {
        "LfdNr": "080",
        "Funktion": "openRecord()",
        "Title 🇬🇧": "Open a specific record",
        "Description 🇬🇧": "The function openRecord() closes the current data form and opens a new one with the specified record. As parameter the ID of the respective data set is expected, which can be taken from a variable or directly from a select query. Since an ID always contains the information of the table in which the data record is located, openRecord() can also be used to branch to other tables. If only the record number is available as a number from the previous process, the record() function can also be used. If the current data form is not to be closed and the new record is to be displayed above it, the function popupRecord() can be used as an alternative.\nWorks in the public cloud only with the button or in the function field with the trigger \"On click\". Not with other triggers.",
        "Syntax 🇬🇧": "openRecord(ID,[String])",
        "Parameters 🇬🇧": "ID = ID of the record to be opened\nSTRING = Name of the tab to be opened.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "openTable(), popupRecord()"
    },
    {
        "LfdNr": "081",
        "Funktion": "openTable()",
        "Title 🇬🇧": "Open a table",
        "Description 🇬🇧": "With openTable() the current table is closed and another one is opened. Optionally, the name of an existing view with which the table is to be displayed can be specified. If no view is specified, the last activated or the default view is opened (e.g. \"(all)\"). If the currently open table is not to be closed and only a certain record of another table is to be displayed, popupRecord() is an alternative.",
        "Syntax 🇬🇧": "openTable(TABELLE【, ANSICHT】)",
        "Parameters 🇬🇧": "TABELLE = Name of the table to be opened as string.\nANSICHT (optional) = Name of the view to be opened as string.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "openRecord(), popupRecord()"
    },
    {
        "LfdNr": "082",
        "Funktion": "openURL()",
        "Title 🇬🇧": "Open a URL in the browser",
        "Description 🇬🇧": "With the function openURL() a web address can be opened with the default browser of the system. In Ninox there is a special data field type called 'Internet address' which contains a button to open a URL in an external web browser from within the data form. It is possible, however, that the URL in question results from the application context or is dynamically composed of several components. This can be done, for example, with a button that generates the URL and then opens it with openURL().",
        "Syntax 🇬🇧": "openURL(URL)",
        "Parameters 🇬🇧": "URL = String with the complete Internet address",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "html(), http()"
    },
    {
        "LfdNr": "150",
        "Funktion": "order by",
        "Title 🇬🇧": "Sort records in loop by fields",
        "Description 🇬🇧": "This function is very useful if you want to sort by a specific \"column\" (= data field) when traversing the records of a table.",
        "Syntax 🇬🇧": "for i in select TABELLE order by DATENFELD",
        "Parameters 🇬🇧": "TABELLE = Name of the table as string.\nDATENFELD = String, number, date or time",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Array",
        "Matching Functions": "rsort(), sort()"
    },
    {
        "LfdNr": "185",
        "Funktion": "parseJSON()",
        "Title 🇬🇧": "Creates a JSON object from a valid JSON string",
        "Description 🇬🇧": "The function parseJSON() can be used to create a JSON object from a string. The prerequisite for this is that the underlying string corresponds to the form of a JSON object. Otherwise you get something undefinable instead of a JSON object.",
        "Syntax 🇬🇧": "parseJSON(STRING)",
        "Parameters 🇬🇧": "STRING = Text, in der Form eines gültigen JSON-Objekts",
        "Category 🇬🇧": "Text functions, Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": ""
    },
    {
        "LfdNr": "083",
        "Funktion": "parseXML()",
        "Title 🇬🇧": "Convert XML data to JSON format",
        "Description 🇬🇧": "The parseXML() function can be used to convert XML data to JSON format. JSON is, besides XML, a common format for data exchange on the Internet and is also supported by Ninox as standard. The function is of particular interest when connecting to external servers via API and processing corresponding data. \n",
        "Syntax 🇬🇧": "parseXML(XMLDATA)",
        "Parameters 🇬🇧": "XMLDATA = Data field or variable containing the XML data to be converted to JSON format",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Convert / Format, Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "formatXML()"
    },
    {
        "LfdNr": "164",
        "Funktion": "phone()",
        "Title 🇬🇧": "Display function field as telephone field",
        "Description 🇬🇧": "With the function phone(), a function field can be displayed as a telephone field with a call button, so that by clicking on it, a call can be started immediately via the local telephone client. There is no plausibility check of the transferred content. Each string is accepted and displayed as a telephone field.",
        "Syntax 🇬🇧": "phone(TELEFON)",
        "Parameters 🇬🇧": "TELEFON = string to be displayed as telephone number",
        "Syntax examples 🇬🇧": "Bsp 1:\nphone(\"+49 32 5678489\")\nBsp: 2\nlet vNumber := first(select Tabelle where Bedingung).TEXT;\nphone(vNumber)",
        "Category 🇬🇧": "Text functions, Convert / Format",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": ""
    },
    {
        "LfdNr": "084",
        "Funktion": "popupRecord()",
        "Title 🇬🇧": "Open a record in a form",
        "Description 🇬🇧": "With popupRecord() a record is opened by its ID in a popup form. Since the ID contains the record number as well as the information of the corresponding table, the record can also be from a different table than the one currently open. For example, the master record of a customer can be opened from an invoice in order to check something there. After closing the pop-up form, you will be returned to the invoice form below. In conjunction with record(), the record number can be specified as a numerical value instead of the ID.\nWorks in the public cloud only with the button or in the function field with the trigger \"On click\". Not with other triggers.",
        "Syntax 🇬🇧": "popupRecord(ID,[STRING])",
        "Parameters 🇬🇧": "ID = Ninox-specific ID of the record to be opened\nSTRING = Name of the tab to be opened.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "openRecord()"
    },
    {
        "LfdNr": "085",
        "Funktion": "pow()",
        "Title 🇬🇧": "Calculate the power of a number",
        "Description 🇬🇧": "With the function pow() the exponent can be used to determine the power of a base number. If the exponent has the value 0.5, the result is the root of the base number; if the value is 1/3, it is the cube root.",
        "Syntax 🇬🇧": "pow(ZAHL1, ZAHL2)",
        "Parameters 🇬🇧": "ZAHL1 = Numerical value or expression as a base number.\nZAHL2 = Numerical value or expression as exponent.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "exp()"
    },
    {
        "LfdNr": "086",
        "Funktion": "printAndSaveRecord()",
        "Title 🇬🇧": "Print PDF file and save as attachment",
        "Description 🇬🇧": "With the function printAndSaveRecord() a record can be \"printed\" into a PDF file and saved internally in Ninox. As with printRecord(), the ID of the record to be printed and the name of the print layout must be specified as parameters. Unlike printRecord(), however, the file is not saved locally, but in a special folder of the respective platform. For targeted access to the file, the path can be read into a variable directly when the function is called. In conjunction with importFile() the file can also be named individually and stored as an attachment to the record.",
        "Syntax 🇬🇧": "printAndSaveRecord(ID, DRUCKLAYOUT)",
        "Parameters 🇬🇧": "ID = ID of the record to be printed.\nDRUCKLAYOUT = Name of the print layout with which the data record is to be printed.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Database operations, Files and Print",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "importFile(), printRecord()"
    },
    {
        "LfdNr": "087",
        "Funktion": "printRecord()",
        "Title 🇬🇧": "Printing a record",
        "Description 🇬🇧": "With printRecord() a record can be \"printed\" as a PDF file and automatically downloaded to your own computer. Ninox expects the ID of the record to be printed and the name of the print layout as parameters.  The name under which the PDF file is saved cannot be determined. It always consists of the table plus the record number (e.g. \"Customer23.pdf\").\n\nIf the generated PDF file is not to be downloaded, but attached to the respective data record in Ninox, the function printAndSaveRecord() is recommended as an alternative.",
        "Syntax 🇬🇧": "printRecord(ID, DRUCKLAYOUT)",
        "Parameters 🇬🇧": "ID = ID of the record to be printed.\nDRUCKLAYOUT = Name of the print layout with which the data record is to be printed.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Database operations, Files and Print",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "printAndSaveRecord()"
    },
    {
        "LfdNr": "088",
        "Funktion": "printTable()",
        "Title 🇬🇧": "Print a table as PDF file",
        "Description 🇬🇧": "With printTable() a table view can be \"printed\" in the standard layout as a PDF file. This function has the same effect as the button for printing tables in the Ninox menu bar.\n\n➤ Note: The function causes a crash or an endless loop on different platforms. The Ninox app must then be closed and restarted. The error is known, its removal is already in progress (status 09.03.2019).\n",
        "Syntax 🇬🇧": "printTable(\"TABELLE\", \"ANSICHT\")",
        "Parameters 🇬🇧": "TABELLE = Name of the table to be printed\nANSICHT = Name of the table view to be printed",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Files and Print",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "printRecord()"
    },
    {
        "LfdNr": "089",
        "Funktion": "quarter()",
        "Title 🇬🇧": "Extract quarter from date",
        "Description 🇬🇧": "The function quarter() reads the quarter from a valid date value and displays it as a number. This can be useful for example when filtering, sorting and grouping records with a calendar reference. If quarter() is applied to a date field, start() or endof() must be used to explicitly specify whether the start time or end time is meant.",
        "Syntax 🇬🇧": "quarter(DATUM | ZEITSTEMPEL | TERMIN)",
        "Parameters 🇬🇧": "DATUM = Valid date value, for example as a date() specification, from a data field or variable.\nZEITSTEMPEL = Valid value in date+time format.\nTERMIN = Specification in the from-to date format. The start time is used for the calculation by default.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "date(), day(), month(), week(), year(), yearquarter()"
    },
    {
        "LfdNr": "190",
        "Funktion": "querryConnection(string,string)",
        "Title 🇬🇧": "No data yet...",
        "Description 🇬🇧": "No data yet...",
        "Syntax 🇬🇧": "querryConnection(string,string)",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": ""
    },
    {
        "LfdNr": "173",
        "Funktion": "radians()",
        "Title 🇬🇧": "Convert degree measure (angle) to radian measure (radian)",
        "Description 🇬🇧": "The radians() function converts the degree measure into radians. It is mostly used for trigonometric calculations.\nThe counterpart to radians() is degrees().",
        "Syntax 🇬🇧": "radians(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Beliebiger numerischer Wert oder Ausdruck.",
        "Syntax examples 🇬🇧": "radians(180) ➤ Ergebnis π\nradians(360) ➤ Ergebnis 2π",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "degrees()"
    },
    {
        "LfdNr": "090",
        "Funktion": "random()",
        "Title 🇬🇧": "Generate a random number",
        "Description 🇬🇧": "The function random() creates a pseudo-random number between 0 (inclusive) and 1 (exclusive). With the help of random(), passwords, check digits or ident numbers can be generated, non-linear test runs or queries with quiz character can be realized.",
        "Syntax 🇬🇧": "random()",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": ""
    },
    {
        "LfdNr": "091",
        "Funktion": "range()",
        "Title 🇬🇧": "Define a numeric value range",
        "Description 🇬🇧": "With range() a numerical value range with from-to specification can be defined. The function is mostly used in connection with program loops or merging functions like concat(). Optionally, a step size differing from standard 1 can be specified with which the defined range is to be run through. This means that if, for example, 2 is specified as the step size, the counter is incremented by 2 or only every second element is taken into account. If only a numerical value is specified as a parameter, Ninox interprets this as a to value and starts counting at 0.",
        "Syntax 🇬🇧": "range(VON, BIS 【, SCHRITTWEITE】)",
        "Parameters 🇬🇧": "VON, BIS = Numerical values for the beginning and end of the value range, FROM is included, BIS is exclusive.\nSCHRITTWEITE (optional) = Numerical value by which the counter/index is to be increased each time (default = 1).",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Array",
        "Matching Functions": ""
    },
    {
        "LfdNr": "092",
        "Funktion": "raw()",
        "Title 🇬🇧": "Transferring Rich Text Formatting",
        "Description 🇬🇧": "The raw() function allows to transfer HTML formatted text to functions that provide unformatted pure text.",
        "Syntax 🇬🇧": "raw(RICHTEXT)",
        "Parameters 🇬🇧": "RICHTEXT = Text that contains HTML formatting",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "html()"
    },
    {
        "LfdNr": "093",
        "Funktion": "record()",
        "Title 🇬🇧": "Address a record numerically",
        "Description 🇬🇧": "With record() a record can be addressed by the numeric value of its ID, i.e. the actual record number as a number. The return value is the ID of the respective record. If the record with the corresponding number does not exist (anymore), 'null' is returned. record() is mostly used in combination with other record related functions like openRecord() or popupRecord(), which expect a \"real\" record ID as parameter.",
        "Syntax 🇬🇧": "record(TABELLE, NR)【.DATENFELD】",
        "Parameters 🇬🇧": "TABELLE = Name of the table from which a data record is to be addressed.\nNR = Number of the data record to be displayed as an integer.\nDATENFELD (optional, according to Ninox documentation) = data field of the table/record.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Record-ID",
        "Matching Functions": "openRecord(), popupRecord(), printAndSaveRecord(), printRecord()"
    },
    {
        "LfdNr": "094",
        "Funktion": "replace()",
        "Title 🇬🇧": "Replace string in text with another string",
        "Description 🇬🇧": "The replace() function allows simple \"search & replace\" as known from text editors. It searches a text for a specific string and replaces each occurrence with a different string. Reasons for this can be both technical and content-related. Both strings can have different lengths and can contain any displayable character. By specifying an empty string as replacement character, unwanted characters can also be removed from a text. The search is case-sensitive, that is, a distinction is made between upper and lower case letters. The replace() function can also be used to set specially marked placeholders within text fields and to replace these placeholders with individual contents later, e.g. when printing or sending e-mails.",
        "Syntax 🇬🇧": "replace(TEXT, SUCHSTRING, ERSATZSTRING)",
        "Parameters 🇬🇧": "TEXT = expression, text field or variable to which replace() is to be applied.\nSUCHSTRING = character or string to be searched for and replaced if necessary.\nERSATZSTRING = Character or character string that is to replace the SEARCH STRING if necessary.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "replacex()"
    },
    {
        "LfdNr": "095",
        "Funktion": "replacex()",
        "Title 🇬🇧": "Search and replace in text with RegExp",
        "Description 🇬🇧": "The function replacex() extends replace() by the possibility to use so called regular expressions, short RegExp or Regex, instead of simple strings. Thus replacex() offers considerably more options for text analysis. If an empty string is specified as replacement character, characters or strings can also be removed. A typical application example for replacex() is the \"cleaning\" or \"smoothing\" of imported data containing unwanted characters. The notation of regular expressions in Ninox is basically the same as in JavaScript. It is quite abstract and requires some training. Assistance with RegExp at https://regexr.com",
        "Syntax 🇬🇧": "replacex(TEXT, REGEX 【, FLAGS】, ERSATZSTRING)",
        "Parameters 🇬🇧": "TEXT = String, text field or variable from which a string is to be extracted, if it occurs\nREGEX = The regular expression with which the text is to be analyzed or searched.\nFLAGS (optional) = Additional control parameter(s), e.g. \"i\" to ignore lower and upper case.\nERSATZSTRING = Character or string to replace strings found with REGEX, if necessary.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "extractx(), replace(), testx()"
    },
    {
        "LfdNr": "096",
        "Funktion": "rgb()",
        "Title 🇬🇧": "Create colors from RGB values",
        "Description 🇬🇧": "rgb() is less a function than a parameter that can be used in conjunction with functions like styled() or color(). An alternative to rgb() is to specify CSS color names. The letters RGB stand for red, green, blue and represent the standard model for representing colors on computers. For each of the three basic colors a value between 0 and 255 is given, the mixture results in the respective color tone. In this way, up to 16.7 million different colours can theoretically be defined. The RGB values can also be specified in the web-typical hexadecimal notation, in which case the prefix \"rgb\" is omitted. Either way: The RGB specification is always passed as a string.",
        "Syntax 🇬🇧": "rgb(RED, GREEN, BLUE | #RGB)",
        "Parameters 🇬🇧": "RED, GREEN, BLUE = Numerical values between 0 and 255 for the respective colors.\n#RGB = Hexadecimal specification of the RGB values preceded by a hash sign.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "rgba(), styled()"
    },
    {
        "LfdNr": "097",
        "Funktion": "rgba()",
        "Title 🇬🇧": "Create colors from RGB and alpha channel",
        "Description 🇬🇧": "rgba() corresponds to rgb(), but with the additional specification of a so-called alpha channel for the opacity of the respective color. In principle, alpha channels are more relevant for graphic and web design, where transparency of overlapping graphic objects is important. In applications such as Ninox, however, they can still be helpful, for example, to create different gradations of a basic color simply by changing the alpha channel, without having to determine the corresponding RGB combination. The alpha channel represents the opacity percentage and must be between 0 and 1. ",
        "Syntax 🇬🇧": "rgba(RED, GREEN, BLUE, ALPHA)",
        "Parameters 🇬🇧": "RED, GREEN, BLUE = Numerical values between 0 and 255 for the respective colors.\nALPHA = Numerical value between 0 and 1 for the opacity of the color.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "rgb(), styled()"
    },
    {
        "LfdNr": "098",
        "Funktion": "round()",
        "Title 🇬🇧": "Round decimal numbers automatically",
        "Description 🇬🇧": "With the function round() a decimal number can be rounded to the specified number of decimal places. This is done according to the rules of \"commercial rounding\": from 5 is rounded up to 4. If no parameter is specified for the number of decimal places, the number is rounded up or down to the nearest integer (= 0 decimal places). \n➤ Note: If you set the number of decimal places in the options of number fields, the number of decimal places is only rounded visually for the display of the respective value. Internally, the respective number is retained with all decimal places and is also used for calculations. It can therefore be useful to use round() in formulas.",
        "Syntax 🇬🇧": "round(ZAHL 【,DEZIMALSTELLEN】)",
        "Parameters 🇬🇧": "ZAHL = Numerical value or expression to be automatically rounded up or down.\nDEZIMALSTELLEN (optional) = Number of decimal places to which to round up or down If you omit the specification, the system rounds up or down to the respective integer.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "ceil(), floor()"
    },
    {
        "LfdNr": "099",
        "Funktion": "rpad()",
        "Title 🇬🇧": "Fill text on the right with characters",
        "Description 🇬🇧": "With the function rpad() a text can be padded on the right side with one or more following characters up to a given length. The string is repeated until the total length of the text is reached. This can be useful, for example, for data which must have a certain length for technical reasons or for optical padding in print layouts in fixed-width font. If the source text already reaches or exceeds the specified length, it remains unchanged. The counterpart to rpad() is lpad().",
        "Syntax 🇬🇧": "rpad(TEXT, LÄNGE, STRING)",
        "Parameters 🇬🇧": "TEXT = Text that should be padded if necessary, if it does not reach the number of characters specified under LENGTH.\nLÄNGE = Length as the numerical number of characters up to which the text is to be filled.\nSTRING = Character or character string with which the text is to be filled.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "lpad()"
    },
    {
        "LfdNr": "100",
        "Funktion": "rsort()",
        "Title 🇬🇧": "Sort elements of an array in descending order",
        "Description 🇬🇧": "With the function rsort() the elements of one or more arrays are sorted in descending order and returned as a new array. Sorting in reverse, i.e. ascending order is done by the function sort(). ",
        "Syntax 🇬🇧": "rsort(ARRAY【, ARRAY ...】)",
        "Parameters 🇬🇧": "ARRAY = value lists or names of the array(s) to be sorted and, if necessary, summarized",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Array",
        "Matching Functions": "sort(), create, delete"
    },
    {
        "LfdNr": "101",
        "Funktion": "select",
        "Title 🇬🇧": "Access, filter and search tables ",
        "Description 🇬🇧": "The select statement is one of the most important elements of the Ninox scripting language. It is always needed when data from unlinked tables is to be accessed in formulas and scripts. By specifying appropriate parameters, the data fields of the tables concerned can be searched for specific values, filtered and read out with their contents. In conjunction with functions such as cnt(), sum() etc., a wide variety of evaluations can also be carried out. In addition, 'select' also specifies the table to be displayed in embedded form views and diagrams. The select statement in Ninox allows for complex queries, but is not comparable to the SQL statement of the same name.",
        "Syntax 🇬🇧": "select TABELLE 【where BEDINGUNG1 【and | or BEDINGUNG2 ...】【order by SORTIERFELD】",
        "Parameters 🇬🇧": "TABELLE = Exact name of the table to be accessed\nBEDINGUNG = Expression for a search or filter criterion. Several conditions can be linked with 'and' or 'or'.\nSORTIERFELD = Data field by which the filter result is to be sorted in ascending order.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "create, delete"
    },
    {
        "LfdNr": "189",
        "Funktion": "sendCommand(string,string)",
        "Title 🇬🇧": "No data yet....",
        "Description 🇬🇧": "No data yet.... ",
        "Syntax 🇬🇧": "sendCommand(string,string)",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": ""
    },
    {
        "LfdNr": "102",
        "Funktion": "sendEmail()",
        "Title 🇬🇧": "Sending an e-mail from Ninox",
        "Description 🇬🇧": "The sendEmail() function can be used to send e-mails directly from Ninox. In combination with printAndSaveRecord() it is possible to generate an offer, an invoice or other documents in PDF format and send them directly via e-mail. Mail address and contents of the mail can be specified directly or read from data fields. The mail is sent via the Ninox server. The sender's address must be the one the user is registered with at Ninox. There is no immediate feedback that the mail has been sent and the e-mail is not stored in the database. For control purposes and as proof of sending, it is therefore recommended to send a copy of the e-mail to your own address or to one to which you have access, using \"cc\" or \"bcc\".",
        "Syntax 🇬🇧": "sendEmail({ from: ABSENDER, to: EMPFÄNGER1 【, cc: EMPFÄNGER2】【, bcc: EMPFÄNGER3】, subject: BETREFF, text: TEXT 【, html: RICHTEXT】【, attachments: DATEIEN】})",
        "Parameters 🇬🇧": "ABSENDER = E-mail address with which the user is registered at Ninox; also used as a reply address.\nEMPFÄNGER = Valid e-mail address of the recipient and optionally other recipients under cc and bcc.\nBETREFF = Unformatted text to be inserted in the subject line of the e-mail\nTEXT = Unformatted text that is sent as the content of the e-mail.\nRICHTEXT (optional)= Text formatted with HTML tags, which is displayed to the recipient, if his mail client supports HTML.\nDATEIEN (optional) = One or more files to be sent as an attachment to the mail.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "User interface/GUI, Web and Integration",
        "Plattformen": "Cloud, Server",
        "Matching Functions": "file(), importFile(), printAndSaveRecord()"
    },
    {
        "LfdNr": "192",
        "Funktion": "shareFile()",
        "Title 🇬🇧": "Create a ShareLink for a file",
        "Description 🇬🇧": "With the function shareFile() a share link of an image field or a certain attachment of the record is created by script.\nIf the share of the file is cancelled with unshareFile(), the link created again with shareFile() leads to nothing. It cannot be created again with the shareFile() function for the same file. The remedy for attachments is to rename the attachment.",
        "Syntax 🇬🇧": "shareFile(ID,STRING | BILDFELD)",
        "Parameters 🇬🇧": "ID = Record ID (this)\nSTRING = Name des Files incl. Endung\nBILDFELD = Name des Bildfeldes",
        "Syntax examples 🇬🇧": "shareFile(this,\"MeinMopped.jpeg\") ➤ Ergebnis: https://share.ninox.com/1x3fy22rpt6xmzixpu3tatwxzzzy2cdge6rzf\nshareFile('Mein Bildfeld') ➤ Ergebnis: https://share.ninox.com/uutqp3nakjy7uqka7sjhtmc1n1ku6sg3iw6t",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "URL",
        "Matching Functions": "unshareFile()"
    },
    {
        "LfdNr": "193",
        "Funktion": "shareView()",
        "Title 🇬🇧": "Create sharelink of a table/ table view",
        "Description 🇬🇧": "With the shareView() function, a ShareLink of the specified table/view is created via script in order to access it.\nIn addition, the form in which the result of the share link is to be displayed can be determined. (PDF, HTML, CSV,  JSON or xlsx).",
        "Syntax 🇬🇧": "shareView(STRING1 【OPTION】| STRING1, STRING2【OPTION】)",
        "Parameters 🇬🇧": "STRING1 = Tabellenname\nSTRING2 = Ansicht der Tabelle\nOPTION = {contentType:\"pdf\", oder \"html\", oder \"csv\", \"json\" or \"xlsx\"}",
        "Syntax examples 🇬🇧": "shareView(\"Tabelle 1\")\nshareView(\"Tabelle 1\", \"Kundenadresse\")\nshareView(\"Tabelle 1\",{contentType: \"json\"})",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "URL",
        "Matching Functions": "unshareView(), unshareAllViews()"
    },
    {
        "LfdNr": "103",
        "Funktion": "sign()",
        "Title 🇬🇧": "Determining the sign of a number",
        "Description 🇬🇧": "With the function sign() the sign of a number can be determined. The return value is either 1 (positive number) or -1 (negative number), where 0 is considered positive.",
        "Syntax 🇬🇧": "sign(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Any numeric value or expression.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "even(), odd()"
    },
    {
        "LfdNr": "104",
        "Funktion": "sin()",
        "Title 🇬🇧": "Calculate the sine of a number",
        "Description 🇬🇧": "With the function sin() the sine of a number can be determined. The result is a numerical value between -1 and 1. ",
        "Syntax 🇬🇧": "sin(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Numerical value or expression whose sine is to be calculated",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "asin()"
    },
    {
        "LfdNr": "167",
        "Funktion": "sleep()",
        "Title 🇬🇧": "Delay of the next script execution in milliseconds",
        "Description 🇬🇧": "With the function sleep() the duration of the delay is specified in milliseconds before the next program step in the script is executed.\nYou can use the function for loop passes to delay them and display notes/warnings for example.",
        "Syntax 🇬🇧": "sleep(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Numerischer Wert in Millisekunden.",
        "Syntax examples 🇬🇧": "sleep(3000) ➤ Ergebnis: Verzögerung um 3 Sekunden",
        "Category 🇬🇧": "Other functions",
        "Plattformen": "Cloud, Server",
        "Matching Functions": ""
    },
    {
        "LfdNr": "105",
        "Funktion": "slice()",
        "Title 🇬🇧": "Extract subarea from an array/string ",
        "Description 🇬🇧": "with slice() you can read out a part of an array and store it in a new array. The part to be read is specified by a start and an end position, from and to which the elements of the array are to be read. The start value is inclusive, the end value is exclusive. The numbering of the elements of an array starts at 0. If the index of the end position is greater than the number of array elements, the read operation will continue until the last element.",
        "Syntax 🇬🇧": "slice(ARRAY|TEXT, STARTPOS, ENDPOS)",
        "Parameters 🇬🇧": "ARRAY = Value list or name of the array to be accessed.\nTEXT = Text field, variable or string.\nSTARTPOS = Index of the start position (inclusive) from which the elements of the array are to be read (1. Pos. = 0).\nENDPOS = Index of the end position (exclusive) up to which the elements of the array are to be read.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Array",
        "Matching Functions": "range()"
    },
    {
        "LfdNr": "106",
        "Funktion": "sort()",
        "Title 🇬🇧": "Sort elements of an array in ascending order",
        "Description 🇬🇧": "With the function sort() the elements of one or more arrays are sorted in ascending order and returned as a new array. Sorting in reverse, i.e. descending order is done by the function rsort(). ",
        "Syntax 🇬🇧": "sort(ARRAY【, ARRAY ...】)",
        "Parameters 🇬🇧": "ARRAY = value lists or names of the array(s) to be sorted and, if necessary, summarized",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Array",
        "Matching Functions": "rsort()"
    },
    {
        "LfdNr": "107",
        "Funktion": "split()",
        "Title 🇬🇧": "Convert string to an array",
        "Description 🇬🇧": "With split() you can split a string into its individual components and read them as elements into an Array. A prerequisite for splitting is that the entries to be separated are separated by a specific character. The function can be useful, for example, to prepare imported data that contains several pieces of information in one text field (e.g. an address or similar). If the data is available in a known order, item() can be used to access each element within the created Array again. Elements connected to a text with concat() can also be converted back to an Array.",
        "Syntax 🇬🇧": "split(TEXT, TRENNZEICHEN)",
        "Parameters 🇬🇧": "TEXT = Character string, text variable or data field with the content to be split.\nTRENNZEICHEN = character or character string by which the individual pieces of information are separated from each other.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Array",
        "Matching Functions": "splitx()"
    },
    {
        "LfdNr": "108",
        "Funktion": "splitx()",
        "Title 🇬🇧": "Convert string to array with RegExp",
        "Description 🇬🇧": "The function splitx() transforms like split() splits strings into single parts and transfers them as elements into an array,\nuses instead of simple strings so-called regular expressions, short RegExp or Regex. This way splitx() offers much more options for text analysis. A typical application example for split() is the formatting of imported text information that is not separated in exactly the same way. The notation of regular expressions in Ninox is basically the same as in JavaScript. It is quite abstract and requires some training. Assistance with RegExp at https://regexr.com",
        "Syntax 🇬🇧": "splitx(TEXT, REGEX)",
        "Parameters 🇬🇧": "TEXT = String, text variable or data field whose contents are to be transferred into an array with splitx() as single elements.\nREGEX = Regular expression that defines the separators between the entries.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Array",
        "Matching Functions": "split()"
    },
    {
        "LfdNr": "109",
        "Funktion": "sqr()",
        "Title 🇬🇧": "Calculating the square of a number",
        "Description 🇬🇧": "With the function sqr() a number can be squared, i.e. multiplied by itself. The result is always a positive number.",
        "Syntax 🇬🇧": "sqr(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Numerical value or expression.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "sqrt()"
    },
    {
        "LfdNr": "110",
        "Funktion": "sqrt()",
        "Title 🇬🇧": "Calculate the square root of a number",
        "Description 🇬🇧": "With the function sqrt() the square root of a positive number can be determined. If a number with a negative sign is used, it must first be converted into a positive number (e.g. with abs()).",
        "Syntax 🇬🇧": "sqrt(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Numerical value or expression.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "sqr()"
    },
    {
        "LfdNr": "111",
        "Funktion": "start()",
        "Title 🇬🇧": "Reading the start time of an appointment",
        "Description 🇬🇧": "The start() function can be used to access the start time of an appointment. The result is a value in the format date+time, which can be further processed as required and visually formatted with format(). The counterpart of start() is endof().",
        "Syntax 🇬🇧": "start(TERMIN)",
        "Parameters 🇬🇧": "TERMIN = Data field or variable of the data type 'Date' with start and end time.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": "appointment(), endof()"
    },
    {
        "LfdNr": "177",
        "Funktion": "string()",
        "Title 🇬🇧": "Returns the textual data of a field or array",
        "Description 🇬🇧": "Returns the textual data of a field or array. It's like kind of the concat() function, converts an array to text.\ne.g. If you use the function with a multiple choice field, you get the hexadecimal value of that field. string(MultipleChoiceField) gives 'f' when there are 4 selected values of a multiple choice field with 4 choices.\n\nThis way you can determine which value you could give to a multiple choice field with a trigger like this: MultipleChoiceField := f (which select all 4 buttons in that field)",
        "Syntax 🇬🇧": "string(ARRAY | TABELLE.FELD | MEHRFACHAUSWAHL)",
        "Parameters 🇬🇧": "ARRAY = value list according to the scheme [\"A\", \"B\", \"C\"] or existing array with the values to be read out.\nTABELLE.FELD = Name of the table and data field whose values are to be read and linked.\nMEHRFACHAUSWAHL = Name of the multiple selection field whose selected options are to be read out.",
        "Category 🇬🇧": "Text functions, Convert / Format, Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "concat()"
    },
    {
        "LfdNr": "112",
        "Funktion": "styled()",
        "Title 🇬🇧": "Design function fields with colour/icon",
        "Description 🇬🇧": "With the Funktioon styled() the display of a function field can be designed with individual colors for back and foreground and with an additional symbol. The value to be displayed is always converted into a string. A typical application is the different display of positive and negative numbers in e.g. green or red, i.e. whenever values are to be highlighted. Foreground color and symbol can be left blank or completely omitted with \"\" when using styled(). In this case, Ninox automatically determines whether the text is displayed in black or white based on the brightness value of the background color.",
        "Syntax 🇬🇧": "styled(TEXT, 【FARBE1【, FARBE 2,【SYMBOL】】】|【OBJ】)",
        "Parameters 🇬🇧": "TEXT = String to be displayed and formatted with styled(); non-text values may need to be converted.\nFARBE1 = background color of the field as string, specified as CSS name, decimal or hexadecimal RGB value.\nFARBE2 (optional) = foreground color of the field, specification as for FIELD1.\nSYMBOL (optional) = Name of the symbol to be displayed in the field (see table Symbols).\nOBJ = {color: FARBE2, background: FARBE1, icon: SYMBOL}",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Convert / Format",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "icon(), rgb(), rgba()"
    },
    {
        "LfdNr": "113",
        "Funktion": "substr()",
        "Title 🇬🇧": "Extract string from text",
        "Description 🇬🇧": "The substr() function can be used to extract a substring from a text. For this purpose, the start position within the text from which the extraction is to start is specified, and optionally the length of the character string to be extracted. If no length is specified, the extraction will continue to the end, i.e. to the last available character of the text. The position count always starts at zero. substr() is often used to determine parts of identically structured data such as invoice numbers or similar, but also to abbreviate comparison values. If, for example, the answer options \"Yes\" and \"No\" are available in a dialog, the query could be reduced to \"J\" or \"N\" with substr(0, 1). Alternatively, the notation substring() can be used.",
        "Syntax 🇬🇧": "substr(TEXT, START【, LÄNGE】)",
        "Parameters 🇬🇧": "TEXT = Text field, variable or string from which a part is to be extracted.\nSTART = position within the text from which the character string is to be extracted (counting starts at 0).\nLÄNGE (optional) = Number of characters to be extracted from the start position (otherwise: to the end).",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "extractx(), substring()"
    },
    {
        "LfdNr": "178",
        "Funktion": "substring()",
        "Title 🇬🇧": "Extract string from text",
        "Description 🇬🇧": "The function substring() can be used to extract a part from a character string. In contrast to substr(), the second parameter is not the number of characters, but the position of the character to be extracted. Special feature: If the to value is smaller than the start position, then the calculation starts backwards from there, at 0 from the beginning of the text. If both parameters are the same, the result is an empty string.\n",
        "Syntax 🇬🇧": "substring(TEXT, ZAHL1 ,ZAHL2)",
        "Syntax examples 🇬🇧": "substring(\"HansGeorg\",4,4) ➤ Ergebnis: Leer/Empty\nsubstring(\"HansGeorg\",4,5) ➤ Ergebnis: \"G\"\nsubstring(\"HansGeorg\",4,0) ➤ Ergebnis: \"Hans\"",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "substr()"
    },
    {
        "LfdNr": "114",
        "Funktion": "sum()",
        "Title 🇬🇧": "Adding up numerical values",
        "Description 🇬🇧": "With sum() numerical values can be summed from an array or a table. For example, these can be invoice amounts or the driven kilometers from a logbook. In connection with 'select' and 'where' filter conditions can be defined, so that for example the invoice and payment amounts of a certain customer in a certain year can be determined. The result can be prepared for display and further processed as required.",
        "Syntax 🇬🇧": "sum(ARRAY | TABELLE.FELD)",
        "Parameters 🇬🇧": "ARRAY = Value list or name of an array with numeric elements to be summed.\nTABELLE.FELD = Name of the table and a numeric data field whose values are to be summed",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Mathematical functions, Array functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "avg(), max(), min()"
    },
    {
        "LfdNr": "115",
        "Funktion": "switch ... case",
        "Title 🇬🇧": "Create condition with multiple options",
        "Description 🇬🇧": "The switch statement makes it possible to query a value for different meanings and to link each to an action. Thus, in many cases, 'switch' can be an efficient alternative to nested if queries. It is recommended to transfer the value to be queried into a variable before and to query this variable in the 'switch'. Different data types can be processed, but the query and return values must be of the same type. The action to be performed can be a simple value assignment, a formula or a function. If the case query is based on a unique actual-equal condition, the variable and the equal sign can be omitted ('case 1: \"A\"' instead of 'case X = 1: \"A\"'). There is no limit to the number of case conditions within a 'switch' construction. If none of the conditions apply, a default action can be specified. Every switch construction must be terminated with 'end' like 'if'. Round brackets can be used to process several commands, separated by semicolons, in one action.",
        "Syntax 🇬🇧": "Bsp. 1\nswitch AUSDRUCK do \n    case WERT1: AKTION1\n    case WERT2: AKTION2 【...】\n  【default: AKTION】\nend\nBsp. 2\nswitch AUSDRUCK do \n    case WERT1: (AKTION1; AKTION1.1; AKTION 1.2)\n    case WERT2: AKTION2 【...】\n  【default: AKTION】\nend",
        "Parameters 🇬🇧": "AUSDRUCK = Variable or data field whose content is to be evaluated.\nWERT1/2 = Value of EXPRESSION as a condition for the action to be executed.\nAKTION/1/2 = Value assignment, calculation or code to be executed.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Program control",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "if ... then"
    },
    {
        "LfdNr": "158",
        "Funktion": "tableId()",
        "Title 🇬🇧": "Reading the internal table ID",
        "Description 🇬🇧": "With the function tableId() the internal identifier of a table of the currently opened database can be read. This identifier, consisting of one or two capital letters, has been part of the URL since version X.X and can be used as an identifier for API actions. For normal Ninox usage it has no meaning.\nFor internal administration, Ninox assigns a letter to each newly created table in alphabetical order from A to Z. If there are more than 26 tables, a second letter will be added, the next table would get the identifier \"AB\", then \"BB\" and so on. The IDs of deleted tables are not reassigned. \nThe tableID is also part of the complete record ID, which can be read with raw(this). For example, \"K13\" would be record no. 13 in table \"K\".",
        "Syntax 🇬🇧": "tableId(TABELLE)",
        "Parameters 🇬🇧": "TABELLE = Text value with the name of the table (or \"this\" for the currently opened table).",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "databaseId()"
    },
    {
        "LfdNr": "116",
        "Funktion": "tan()",
        "Title 🇬🇧": "Calculate the tangent of an angle",
        "Description 🇬🇧": "The function tan() returns the tangent of an angle.",
        "Syntax 🇬🇧": "tan(ZAHL)",
        "Parameters 🇬🇧": "ZAHL = Relevant numeric value or expression.",
        "Syntax examples 🇬🇧": "tan(4.5) ➤ Result 4,637332054551",
        "Category 🇬🇧": "Mathematical functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "atan(), atan2()"
    },
    {
        "LfdNr": "159",
        "Funktion": "teamId()",
        "Title 🇬🇧": "Determining the Team ID",
        "Description 🇬🇧": "The function teamId() determines the Team-ID in which you are currently located.\nIt is mostly needed for the REST-API.\nIn the local apps the result is: #local",
        "Syntax 🇬🇧": "teamId()",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Database operations, Web and Integration",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": ""
    },
    {
        "LfdNr": "117",
        "Funktion": "testx()",
        "Title 🇬🇧": "Check text for string with RegExp",
        "Description 🇬🇧": "Like contains(), the function testx() has the purpose of checking a text for the occurrence of a certain character string, but instead of a simple search string, it uses so-called Regular Expressions, in short RegExp or Regex, and thus offers considerably more possibilities for the analysis of texts. The notation of regular expressions in Ninox is essentially the same as in JavaScript. It is quite abstract and requires some training. Assistance with RegExp at https://regexr.com",
        "Syntax 🇬🇧": "testx(TEXT, REGEX【, FLAGS】)",
        "Parameters 🇬🇧": "TEXT = String, text field or variable from which a string is to be extracted, if it occurs\nREGEX = The regular expression to search for in the text.\nFLAGS (optional) = Additional control parameter(s), e.g. \"i\" to ignore lower and upper case.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Program control",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Logical",
        "Matching Functions": "contains(), extractx(), replacex()"
    },
    {
        "LfdNr": "118",
        "Funktion": "text()",
        "Title 🇬🇧": "Convert data to text / read out text values",
        "Description 🇬🇧": "With the function text() almost all data types in Ninox can be read as text values or converted to text. Many data types such as day dates or times are displayed as plain text in Ninox, but are stored internally in numeric or other system-specific form. If such a data type is accessed in a script, the internal value is usually returned. This is useful for calculations, but sometimes you need the content as plain text, e.g. to merge it with other data types in one text. Thus, for example, text() can be used to access the text entries of selection fields. For numbers, date and time values, the function format() alternatively offers formatting options besides text conversion.",
        "Syntax 🇬🇧": "text(WERT)",
        "Parameters 🇬🇧": "WERT = Data field, variable or expression or function whose contents/result is to be transferred or displayed as text.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Convert / Format",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "format()"
    },
    {
        "LfdNr": "119",
        "Funktion": "time()",
        "Title 🇬🇧": "Set or read out a time",
        "Description 🇬🇧": "With the function time() clock times can be read or set. All data types that contain a time specification can be addressed. For appointment fields, start() or endof() must be used to specify whether the time of the start or end time is meant. The numerical components of times, i.e. hour, minute, seconds and milliseconds, can be processed individually if required and assigned as a time value to a corresponding variable or data type.",
        "Syntax 🇬🇧": "time(STD, MIN【, SEK】【, MIS】|| ZEITSTEMPEL || start | endof (TERMIN))",
        "Parameters 🇬🇧": "STD, MIN, SEK, MIS = Numerical values for hour, minute, second and millisecond.\nZEITSTEMPEL = Variable, data field or value in date+time format.\nTERMIN = Variable, data field or value in date format with start and end time.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": "date(), now(), today()"
    },
    {
        "LfdNr": "120",
        "Funktion": "timeinterval()",
        "Title 🇬🇧": "Calculate time interval in milliseconds",
        "Description 🇬🇧": "With timeinterval() variables and data fields can be assigned unique durations in milliseconds. Unlike duration(), timeinterval() does not calculate the difference between two times, but only specifies the value of a time specification. This can be useful, for example, for the exact calculation of times in minutes, seconds and/or milliseconds. In Ninox the value is displayed as plain text, the number of miliseconds is obtained by combining number(). If timeinterval is applied to a date, the return value is the time elapsed since 01.01.1970.",
        "Syntax 🇬🇧": "timeinterval(MILLISEKUNDEN | UHRZEIT)",
        "Parameters 🇬🇧": "MILLISEKUNDEN = time interval in milliseconds\nUHRZEIT = Value of the Time data type with hours and minutes, optionally also seconds and milliseconds.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": "duration()"
    },
    {
        "LfdNr": "176",
        "Funktion": "timestamp()",
        "Title 🇬🇧": "Generate date and time from a UNIX-number",
        "Description 🇬🇧": "Gives the date and time of a UNIX number ",
        "Syntax 🇬🇧": "timestamp(UNIXZEIT)",
        "Parameters 🇬🇧": "UNIXZEIT= Numeric period specification in milliseconds since 01.01.1970, 00:00 (Unix time). ",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": ""
    },
    {
        "LfdNr": "121",
        "Funktion": "today()",
        "Title 🇬🇧": "Output the current date",
        "Description 🇬🇧": "With today(), the current date can be determined, i.e. the day on which the function is executed. today() is the basis for many calculations of periods and durations based on the current date and is often used in whole or in part to generate document numbers for invoices and the like. If, in addition to the current date, the current time is also to be determined, the function now() can be used instead of today().",
        "Syntax 🇬🇧": "today()",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Date/Time",
        "Matching Functions": "date(), now()"
    },
    {
        "LfdNr": "122",
        "Funktion": "trim()",
        "Title 🇬🇧": "Remove leading and following spaces",
        "Description 🇬🇧": "The function trim() removes all spaces at the beginning and end of a text. Text information that has been imported from external sources, copied and pasted or composed of different values may contain unwanted spaces at the beginning and/or end. Such leading or following spaces can be completely removed with trim() if necessary. Spaces within the text remain unchanged. The function can also be used prophylactically on values where it is important that they do not contain unnecessary spaces. For example, a trigger \"After change\" of a data field could be created, which \"cleans\" the content if necessary: \"Text field := trim(text field)",
        "Syntax 🇬🇧": "trim(TEXT)",
        "Parameters 🇬🇧": "TEXT = expression, data field or variable with the text to be trimmed with trim()",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "text()"
    },
    {
        "LfdNr": "198",
        "Funktion": "typeof()",
        "Category 🇬🇧": "Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "get()"
    },
    {
        "LfdNr": "123",
        "Funktion": "unique()",
        "Title 🇬🇧": "Consider only unique values",
        "Description 🇬🇧": "With the function unique() arrays and tables can be filtered for unique values, multiple occurring values are only considered once. This can be helpful in the context of qualitative and quantitative evaluations, where duplicates are to be excluded. For example, unique() could be used to determine which and how many different article groups occur in an article database. In addition, unique() can also be used to combine the unique values of several arrays. This possibility can be used, for example, to activate options of multiple selection fields in a script, i.e. to mark them as selected. ",
        "Syntax 🇬🇧": "unique(TABELLE.FELD | ARRAY【, ARRAY ...】)",
        "Parameters 🇬🇧": "TABELLE.FELD = Name of the table and the field of which only unique entries are to be considered.\nARRAY = value list or name of the array(s) to be merged with their unique elements.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions, Database operations",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Array",
        "Matching Functions": "rsort(), sort()"
    },
    {
        "LfdNr": "195",
        "Funktion": "unshareAllViews()",
        "Title 🇬🇧": "Ends the release of all views of the table",
        "Description 🇬🇧": "The unshareAllViews() function terminates all created shares on the views of the table.",
        "Syntax 🇬🇧": "unshareAllViews(TABELLENNAME)",
        "Parameters 🇬🇧": "TABELLENNAME = Name der Tabelle als String",
        "Syntax examples 🇬🇧": "unshareAllViews(\"Kundendaten\")",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": ""
    },
    {
        "LfdNr": "194",
        "Funktion": "unshareFile()",
        "Title 🇬🇧": "End access to the link created with shareFile()",
        "Description 🇬🇧": "The unshareFile() function terminates access to the file using the link created with shareFile().\nATTENTION: If the unshareFile() function has been used, no new working link can be created with shareFile(),",
        "Syntax 🇬🇧": "unshareFile(ID, STRING | BILDFELD )",
        "Parameters 🇬🇧": "ID = Record ID (this)\nSTRING = Name des Files incl. Endung\nBILDFELD = Name des Bildfeldes",
        "Syntax examples 🇬🇧": "unshareFile(this,\"MeinMopped.jpeg\")\nunshareFile('Mein Bildfeld')\nunshareFile(first(select TABELLE where FELD = \"Test\").Nr, \"Bike.png\")",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": ""
    },
    {
        "LfdNr": "196",
        "Funktion": "unshareView()",
        "Title 🇬🇧": "Ends the release of a specific view of the table",
        "Description 🇬🇧": "The unshareView() function ends the sharing of the selected view of the table.",
        "Syntax 🇬🇧": "unshareView(TABELLE, ANSICHT)",
        "Parameters 🇬🇧": "TABELLE = Name der Tabelle\nANSICHT = Name der Ansicht",
        "Syntax examples 🇬🇧": "unshareView(\"Kundendaten\", \"Adresse\")",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": ""
    },
    {
        "LfdNr": "124",
        "Funktion": "upper()",
        "Title 🇬🇧": "Convert text to upper case",
        "Description 🇬🇧": "With upper() all lower case letters of a text can be converted to upper case. All other characters remain unchanged. The function can be helpful when comparing strings or for the prophylactic or actual correction of incorrect spellings in names, designations or identifiers that contain only uppercase letters. The counterpart of upper() is lower().",
        "Syntax 🇬🇧": "upper(TEXT)",
        "Parameters 🇬🇧": "TEXT = Text or character string whose letters are all to be converted to upper case",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Text functions, Convert / Format",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "lower()"
    },
    {
        "LfdNr": "166",
        "Funktion": "url()",
        "Title 🇬🇧": "Display function field as URL field",
        "Description 🇬🇧": "With the url() function, a function field can be displayed as a URL field with a link button, so that clicking on it also opens the link via the local browser. \nBy adding an object, the Internet address can be expanded to a REST URL with automatic URL encoding.\nA plausibility check of the transferred content does not take place. Every string is taken over and displayed as a URL field.",
        "Syntax 🇬🇧": "url(LINK, [OBJ])",
        "Parameters 🇬🇧": "LINK = URL address, text field or variable.\nOBJ = JavaScript-Objekt",
        "Syntax examples 🇬🇧": "Bsp 1: url(\"https://ninox.com\")\nBsp 2: let vURL := first(select Tabelle where Bedingung).TEXT; url(vURL)\nBsp 3: let vREST := {Name: \"Hanß-Günther\"};url(\"https://ninox.com\",vREST)  ➤ Ergebnis: https://www.ninox.com?Name=Han%C3%9F-G%C3%BCnther",
        "Category 🇬🇧": "Convert / Format",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": ""
    },
    {
        "LfdNr": "125",
        "Funktion": "urlDecode()",
        "Title 🇬🇧": "Remove URL encodings",
        "Description 🇬🇧": "The urlDecode() function removes all percentage encodings from a URL and converts it to a normal string. The counterpart to urlDecode() is urlEncode().",
        "Syntax 🇬🇧": "urlDecode(URL)",
        "Parameters 🇬🇧": "URL = Character string with the encoded URL segments.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "http(), urlEncode()"
    },
    {
        "LfdNr": "126",
        "Funktion": "urlEncode()",
        "Title 🇬🇧": "Encoding string into HTML-compliant URL",
        "Description 🇬🇧": "The urlEncode() function converts a string into an HTTP-compliant URL. All invalid characters are replaced by a percentage sign and a hexadecimal value. The counterpart to urlEncode() is urlDecode().",
        "Syntax 🇬🇧": "urlEncode(TEXT)",
        "Parameters 🇬🇧": "TEXT = Character string to be encoded as URL ",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "http(), urlDecode()"
    },
    {
        "LfdNr": "181",
        "Funktion": "urlOf()",
        "Title 🇬🇧": "Fetch the url of the current view (browser adress-bar)",
        "Description 🇬🇧": "With the function urlOf() you get a URL address to the table of the database. \nIf you want to open a specific record, add 'node/Record-ID' at the end.\nThe result is returned as a string.",
        "Syntax 🇬🇧": "urlOf(ID)\nurlOf(ID,STRING1,STRING2)\nurlOf(STRING1,STRING2)",
        "Syntax examples 🇬🇧": "let me := this;\nurlOf(me)",
        "Category 🇬🇧": "Web and Integration",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": ""
    },
    {
        "LfdNr": "127",
        "Funktion": "user()",
        "Title 🇬🇧": "Display the current user",
        "Description 🇬🇧": "The function user() returns the name of the current user.",
        "Syntax 🇬🇧": "user()",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": "userEmail(), userHasRole(), userId(), userName()"
    },
    {
        "LfdNr": "128",
        "Funktion": "userEmail()",
        "Title 🇬🇧": "Reading the e-mail address of a user",
        "Description 🇬🇧": "With userEmail() the e-mail address of the current user can be read. This is the address with which this user is registered as team member. If no specific user is specified, the function always refers to the current user, i.e. the one who calls the function.",
        "Syntax 🇬🇧": "userEmail(【USER】)",
        "Parameters 🇬🇧": "USER (optional) = creator (_cu) or last editor (_mu) of the record ",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": "user()"
    },
    {
        "LfdNr": "129",
        "Funktion": "userFirstName()",
        "Title 🇬🇧": "Display first names of the user",
        "Description 🇬🇧": "With userFirstName() the first name of a user can be read. If no specific user is specified, the function always refers to the current user, i.e. the one who calls the function.",
        "Syntax 🇬🇧": "userFirstName(【USER】)",
        "Parameters 🇬🇧": "USER (optional) = creator (_cu) or last editor (_mu) of the record ",
        "Syntax examples 🇬🇧": "userFirstname(_mu) ➤ Result (example): \"Anna\"",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": "user()"
    },
    {
        "LfdNr": "130",
        "Funktion": "userFullName()",
        "Title 🇬🇧": "Show full user name",
        "Description 🇬🇧": "With userFullName() the full name of a user can be read. The result is normally the same as the result of the userName() function. If no specific user is specified, the function always refers to the current user, i.e. the one who calls the function.",
        "Syntax 🇬🇧": "userFullName(【USER】)",
        "Parameters 🇬🇧": "USER (optional) = creator (_cu) or last editor (_mu) of the record ",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": "user()"
    },
    {
        "LfdNr": "131",
        "Funktion": "userHasRole()",
        "Title 🇬🇧": "Check user for specific role",
        "Description 🇬🇧": "With userHasRole() you can check if the current user has a certain role. The return value is either true or false.",
        "Syntax 🇬🇧": "userHasRole(ROLLE)",
        "Parameters 🇬🇧": "ROLLE = String with a role defined in the respective team, e.g. \"admin\" or \"editor\".",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Logical",
        "Matching Functions": "user()"
    },
    {
        "LfdNr": "132",
        "Funktion": "userId()",
        "Title 🇬🇧": "Determining the internal ID of a user",
        "Description 🇬🇧": "The function userId() returns the internal alphanumeric ID of the current user. If no specific user is specified, the function always refers to the current user, i.e. the one who calls the function.",
        "Syntax 🇬🇧": "userId(【USER】)",
        "Parameters 🇬🇧": "USER (optional) = creator (_cu) or last editor (_mu) of the record ",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": "user()"
    },
    {
        "LfdNr": "174",
        "Funktion": "userIsAdmin()",
        "Title 🇬🇧": "Check if user has admin rights",
        "Description 🇬🇧": "The function userIsAdmin() can be used to check whether the current user has administration rights. The result is either yes/true or no/false. Alternatively, the role \"admin\" can be queried with userRole().",
        "Syntax 🇬🇧": "userIsAdmin()",
        "Syntax examples 🇬🇧": "if userIsAdmin() then ... else ... end",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Logical",
        "Matching Functions": "userRole()"
    },
    {
        "LfdNr": "133",
        "Funktion": "userLastName()",
        "Title 🇬🇧": "Determining the last name of a user",
        "Description 🇬🇧": "With userLastName() the last name of a user can be read. If no specific user is specified, the function always refers to the current user, i.e. the one who calls the function.",
        "Syntax 🇬🇧": "userLastName(【USER】)",
        "Parameters 🇬🇧": "USER (optional) = creator (_cu) or last editor (_mu) of the record ",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": "user()"
    },
    {
        "LfdNr": "134",
        "Funktion": "userName()",
        "Title 🇬🇧": "Determining the username of a user ",
        "Description 🇬🇧": "With the function userName() the username of a user can be read. The result is normally the same as that of the functions user() and userFullName(). If no specific user is specified, the function always refers to the current user, i.e. the one who calls the function.",
        "Syntax 🇬🇧": "userName(【USER】)",
        "Parameters 🇬🇧": "USER (optional) = creator (_cu) or last editor (_mu) of the record ",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": "user()"
    },
    {
        "LfdNr": "135",
        "Funktion": "userRole()",
        "Title 🇬🇧": "Determining the role of a user",
        "Description 🇬🇧": "With userRole() the role assigned to a user can be read. The result is a string with the role name. If no specific user is specified, the function always refers to the current user, i.e. the one who calls the function.",
        "Syntax 🇬🇧": "userRole(【USER】)",
        "Parameters 🇬🇧": "USER (optional) = creator (_cu) or last editor (_mu) of the record ",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Text",
        "Matching Functions": "user(), userHasRole(), userRoles()"
    },
    {
        "LfdNr": "153",
        "Funktion": "userRoles()",
        "Title 🇬🇧": "Determine roles of a user",
        "Description 🇬🇧": "With userRoles() the roles assigned to a user can be read. The result is an array with the role names. If no specific user is specified, the function always refers to the current user, i.e. the one who calls the function.",
        "Syntax 🇬🇧": "userRoles(【USER】)",
        "Parameters 🇬🇧": "USER (optional) = creator (_cu) or last editor (_mu) of the record ",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Array functions, Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Array",
        "Matching Functions": "user(), userHasRole(), userRole()"
    },
    {
        "LfdNr": "136",
        "Funktion": "users()",
        "Title 🇬🇧": "Read all users into an array",
        "Description 🇬🇧": "With the function users() the names of all registered users, i.e. all members of the team, can be read in. The result is an array with the full names of the users.",
        "Syntax 🇬🇧": "users()",
        "Syntax examples 🇬🇧": "users() ➤ Result (example): [\"Anna Bolika\", \"Max Mustermann\", \"Harry Hurtig\"]",
        "Category 🇬🇧": "Array functions, Users/Roles/Rights",
        "Plattformen": "Cloud, Server",
        "Return value": "Array",
        "Matching Functions": "user()"
    },
    {
        "LfdNr": "137",
        "Funktion": "var",
        "Title 🇬🇧": "Declare a variable",
        "Description 🇬🇧": "The 'var' statement is used to declare a variable in Ninox by assigning a value to it. It automatically assumes the data type of the assigned value. Variables are a basic element of every script and programming language. They are only temporarily valid within a script and serve to temporarily store values for further processing steps. If the script is terminated, all variables lose their contents. var\" was introduced after 'let' and is documented here only for completeness. In practice, there are no noticeable differences, which is why you can stay with 'let' (or use var throughout) for consistency.",
        "Syntax 🇬🇧": "var NAME := WERT",
        "Parameters 🇬🇧": "NAME = Freely selectable name (except Ninox keywords) under which the variable is to be addressed.\nWERT = Any value of any data type that the variable is to take on, either as a direct assignment, as the result of a function, or from a data field or other variable.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Program control",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Variable",
        "Matching Functions": "let"
    },
    {
        "LfdNr": "188",
        "Funktion": "waitForSync()",
        "Title 🇬🇧": "Query whether synchronisation has been completed in a script",
        "Description 🇬🇧": "The waitForSync() function checks whether the synchronisation of the data from the local Ninox app with the Ninox server has taken place and returns a Boolean. \nThis can be used to control that, depending on the result of waitForSync(), a script continues to be executed in which data transferred from the app to the Ninox server is to be processed.\nThe application of the function only makes sense in the local apps, as the script execution primarily runs locally before anything happens on the server side.\nIn case of synchronisation problems Ninox-App -> Ninox-Server you can reset the synchronisation in the App in the database properties.\nCAUTION!!! Data that has not been synchronised up to this point will be lost.\n",
        "Syntax 🇬🇧": "waitForSync()",
        "Syntax examples 🇬🇧": "waitForSync() ➤ true oder false",
        "Category 🇬🇧": "Other functions",
        "Plattformen": "Mac, iPad, iPhone, Android",
        "Return value": "Logical",
        "Matching Functions": ""
    },
    {
        "LfdNr": "138",
        "Funktion": "week()",
        "Title 🇬🇧": "Calculate calendar week from a date",
        "Description 🇬🇧": "With week() the calendar week can be determined from a current date. The result is a number between 1 and 53. All data types that contain a current date can be used for the calculation. With format(), the value can be formatted for display in text form.",
        "Syntax 🇬🇧": "week(DATUM | ZEITSTEMPEL | TERMIN) ",
        "Parameters 🇬🇧": "DATUM = Valid date value, for example as a date() specification, from a data field or variable.\nZEITSTEMPEL = Valid value in date+time format.\nTERMIN = Specification in the from-to date format. The start time is used for the calculation by default.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "date(), day(), month(), quarter(), year()"
    },
    {
        "LfdNr": "139",
        "Funktion": "weekday()",
        "Title 🇬🇧": "Determine weekday as number from date",
        "Description 🇬🇧": "With weekday() the corresponding weekday can be determined from a date. Result is a number from 0 for Monday to 6 for Sunday. This number can be used, for example, to check whether a certain date is plausible as a work or weekend day in a given context. All data types that contain a current date can be used for the calculation.",
        "Syntax 🇬🇧": "weekday(DATUM | ZEITSTEMPEL | TERMIN)",
        "Parameters 🇬🇧": "DATUM = Valid date value, for example as a date() specification, from a data field or variable.\nZEITSTEMPEL = Valid value in date+time format.\nTERMIN = Specification in the from-to date format. The start time is used for the calculation by default.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "weekdayIndex(), weekdayName()"
    },
    {
        "LfdNr": "140",
        "Funktion": "weekdayIndex()",
        "Title 🇬🇧": "Determine number from weekday name",
        "Description 🇬🇧": "With weekdayIndex() the number of a weekday can be determined from its name. Result is a number from 0 for Monday to 6 for Sunday. This number can be used, for example, to check whether a certain date is plausible as a work or weekend day in a given context. The function weekdayIndex() can be helpful if the weekday is only available as text by name, but is to be processed with numerical operators such as greater or smaller. The counterpart to weekdayIndex() is weekdayName().",
        "Syntax 🇬🇧": "weekdayIndex(WOCHENTAG)",
        "Parameters 🇬🇧": "WOCHENTAG = String with the name of the weekday depending on the language setting (e.g. \"Monday\")",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "weekday(), weekdayName()"
    },
    {
        "LfdNr": "141",
        "Funktion": "weekdayName()",
        "Title 🇬🇧": "Get the name of a weekday",
        "Description 🇬🇧": "With weekdayName() the name of a weekday can be determined from its number. The result is a string with the name of the weekday in the respective language. The function weekdayName() can be useful, for example, if the weekday is only available as a number as the result of a calculation, but should be displayed to the user in plain text. The counterpart of wekdayName() is weekdayIndex().",
        "Syntax 🇬🇧": "weekdayName(INDEX)",
        "Parameters 🇬🇧": "INDEX = Number of the weekday as a number (0 - 6) or expression.\n0 - Sunday, 6 - Saturday",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "weekday(), weekdayIndex()"
    },
    {
        "LfdNr": "184",
        "Funktion": "weekdayNameAllLang()",
        "Title 🇬🇧": "Get the name of the weekday in own language",
        "Description 🇬🇧": "With weekdayNameAllLang() the name of a weekday can be determined from a date field. The result is a string with the name of the weekday in the  language of the system settings. (Also Dutch)",
        "Syntax 🇬🇧": "weekdayNameAllLang(date,string)",
        "Parameters 🇬🇧": "date > datefield\nstring > \"\"",
        "Syntax examples 🇬🇧": "weekdayNameAllLang(datefield,\"\") > returns a name of the weekday in system language",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "weekdayName()"
    },
    {
        "LfdNr": "142",
        "Funktion": "while ... do",
        "Title 🇬🇧": "Program loop with condition",
        "Description 🇬🇧": "With 'while ... do' program loops dependent on a condition can be realized. The condition can be defined with any expression valid in Ninox, all data types and operators. The loop is terminated with the keyword 'end'. The code between 'do' and 'end' is executed as long as the condition is fulfilled. This code can also contain user-defined functions, for example. Program loops are important instruments for controlling the program flow in all script and programming languages. In principle, the number of loops is not limited, but the condition should be checked carefully to ensure that it cannot produce endless loops.",
        "Syntax 🇬🇧": "while BEDINGUNG do\n   CODE\nend",
        "Parameters 🇬🇧": "BEDINGUNG = Valid expression for defining the condition.\nCODE = Steps to be executed repeatedly within the loop.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Program control",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Matching Functions": "for ... from ... to"
    },
    {
        "LfdNr": "143",
        "Funktion": "workdays()",
        "Title 🇬🇧": "Calculate number of working days",
        "Description 🇬🇧": "With the function workdays() the number of working days between two dates can be calculated. Working days are the days of the week Monday through Friday, excluding any public holidays. The calculation can be based on all data types that contain a current date, but both date values must be of the same type. For date fields start() or endof() must be specified. If all days including weekends are to be considered in the calculation, the days() function is to be preferred.",
        "Syntax 🇬🇧": "workdays(START, ENDE)",
        "Parameters 🇬🇧": "START, ENDE = Valid date values of the data types date, date+time or start/endof(date) or corresponding expressions",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "days()"
    },
    {
        "LfdNr": "144",
        "Funktion": "year()",
        "Title 🇬🇧": "Extract year from date",
        "Description 🇬🇧": "The function year() reads the year from a valid date value and provides it as a numeric value. This can be useful, for example, when calculating with year values and when filtering, sorting and grouping records with a calendar reference. If year() is applied to an appointment field, Ninox will take the start time of the appointment as the reference date. Otherwise, endof() explit must be used to indicate that the end time is meant.",
        "Syntax 🇬🇧": "year(DATUM | ZEITSTEMPEL | TERMIN)",
        "Parameters 🇬🇧": "DATUM= Valid date value, for example as a date() specification, from a data field or variable.\nZEITSTEMPEL = Valid value in date+time format.\nTERMIN = Specification in the from-to date format. The start time is used for the calculation by default.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Numeric",
        "Matching Functions": "date(), day(), month(), quarter(), week()"
    },
    {
        "LfdNr": "145",
        "Funktion": "yearmonth()",
        "Title 🇬🇧": "Extract year + month from date",
        "Description 🇬🇧": "The function yearmonth() reads the year and calendar month from a valid date value and displays them in the format \"YYYY/MM\". This can be useful, for example, when filtering, sorting and grouping records with a calendar reference. If yearmonth() is applied to an appointment field, Ninox will take the start time of the appointment as the reference date. Otherwise, endof() explit must be used to indicate that the end time is meant.",
        "Syntax 🇬🇧": "yearmonth(DATUM | ZEITSTEMPEL | TERMIN)",
        "Parameters 🇬🇧": "DATUM = Valid date value, for example as a date() specification, from a data field or variable.\nZEITSTEMPEL = Valid value in date+time format.\nTERMIN = Specification in the from-to date format. The start time is used for the calculation by default.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "date(), month(), year()"
    },
    {
        "LfdNr": "146",
        "Funktion": "yearquarter()",
        "Title 🇬🇧": "Extract year + quarter from date",
        "Description 🇬🇧": "The yearquarter() function reads the year and quarter from a valid date value and displays them in the format \"YYYY Q1\". \nThis can be useful, for example, when filtering, sorting and grouping records with a calendar reference. \nIf yearquarter() is applied to an appointment field, Ninox will take the start time of the appointment as the reference date. \nOtherwise, endof() explit must be used to indicate that the end time is meant.",
        "Syntax 🇬🇧": "yearquarter(DATUM | ZEITSTEMPEL | TERMIN)",
        "Parameters 🇬🇧": "DATUM = Valid date value, for example as a date() specification, from a data field or variable.\nZEITSTEMPEL = Valid value in date+time format.\nTERMIN = Specification in the from-to date format. The start time is used for the calculation by default.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "date(), year()"
    },
    {
        "LfdNr": "147",
        "Funktion": "yearweek()",
        "Title 🇬🇧": "Extract year + week from date",
        "Description 🇬🇧": "The yearweek() function reads the year and calendar week from a valid date value and displays it in the format \"YYYY/WW\". This can be useful for filtering, sorting and grouping records with a calendar reference. If yearweek() is applied to an appointment field, Ninox will take the start time of the appointment as the reference date. Otherwise, endof() explit must be used to indicate that the end time is meant.",
        "Syntax 🇬🇧": "yearweek(DATUM | ZEITSTEMPEL | TERMIN)",
        "Parameters 🇬🇧": "DATUM = Valid date value, for example as a date() specification, from a data field or variable.\nZEITSTEMPEL = Valid value in date+time format.\nTERMIN = Specification in the from-to date format. The start time is used for the calculation by default.",
        "Syntax examples 🇬🇧": "Please enter the translation in your language here, analogous to the German example.\nThanks",
        "Category 🇬🇧": "Date and time functions",
        "Plattformen": "Cloud, Server, Mac, iPad, iPhone, Android",
        "Return value": "Text",
        "Matching Functions": "date(), week(), year()"
    }
]